/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
//TODO: static import this
import com.atslangplugin.psi.ATSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Holger_2/Documents/Projects/IntelliJATS/src/main/grammar/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;
  public static final int PRAGMA = 4;
  public static final int DEFINE = 6;
  public static final int DEFINE_CONTINUATION = 8;
  public static final int CONTINUATION = 10;
  public static final int NESTING_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\25\1\30\4\13\1\30\1"+
    "\136\1\137\1\16\1\13\1\16\1\13\1\16\1\137\1\67\3\13\1\140\1\1\1\141\4\1\5"+
    "\13\1\27\2\13\1\142\4\13\1\40\1\13\1\143\3\1\1\13\1\144\1\47\2\13\1\145\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\146\5\1\1\104\2\13\1\140\1\147\3\1"+
    "\1\150\1\13\1\151\1\42\2\13\1\40\1\1\2\13\1\140\1\1\1\37\1\42\1\13\1\144\6"+
    "\1\1\152\1\153\14\13\4\1\21\13\1\134\2\13\1\134\1\154\1\13\1\144\3\13\1\155"+
    "\1\156\1\157\1\120\1\156\2\1\1\160\4\1\1\161\1\1\1\120\6\1\1\162\1\163\1\164"+
    "\1\165\1\166\3\1\1\167\147\1\2\13\1\143\2\13\1\143\10\13\1\170\1\171\2\13"+
    "\1\126\3\13\1\172\1\1\1\13\1\107\4\173\4\1\1\103\35\1\1\174\2\1\1\175\1\25"+
    "\4\13\1\176\1\25\4\13\1\127\1\104\1\13\1\144\1\25\4\13\1\143\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4\1\2\13\1\144"+
    "\20\13\1\120\1\13\1\177\1\1\2\13\1\143\1\103\1\13\1\144\4\13\1\40\2\1\1\200"+
    "\1\201\5\13\1\202\1\13\1\144\1\27\3\1\1\200\1\203\1\13\1\31\1\1\3\13\1\140"+
    "\1\201\2\13\1\140\3\1\1\204\1\42\1\13\1\40\1\13\1\107\1\1\1\13\1\120\1\50"+
    "\2\13\1\31\1\103\1\1\1\205\1\206\2\13\1\46\1\1\1\207\1\1\1\13\1\210\3\13\1"+
    "\211\1\212\1\213\1\30\1\64\1\214\1\215\1\173\2\13\1\127\1\40\7\13\1\31\1\1"+
    "\72\13\1\140\1\13\1\216\2\13\1\145\20\1\26\13\1\144\6\13\1\75\2\1\1\107\1"+
    "\217\1\55\1\220\1\221\6\13\1\16\1\1\1\150\25\13\1\144\1\1\4\13\1\201\2\13"+
    "\1\27\2\1\1\145\7\1\1\205\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1\222\4\13\1"+
    "\143\1\223\1\224\2\1\1\225\1\13\1\14\1\226\2\144\2\1\7\13\1\30\30\1\1\13\1"+
    "\120\3\13\1\67\2\1\2\13\1\1\1\13\1\227\2\13\1\40\1\13\1\144\2\13\1\230\3\1"+
    "\11\13\1\144\6\1\2\13\1\27\3\13\1\140\11\1\23\13\1\107\1\13\1\40\1\27\11\1"+
    "\1\231\2\13\1\232\1\13\1\40\1\13\1\107\1\13\1\143\4\1\1\13\1\233\1\13\1\40"+
    "\1\13\1\75\4\1\3\13\1\234\4\1\1\67\1\235\1\13\1\140\2\1\1\13\1\120\1\13\1"+
    "\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4"+
    "\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\150\2\13\1\27\4\1\1\150\2\13\2\1\1"+
    "\13\1\46\1\1\1\150\1\13\1\107\2\1\2\13\1\236\1\150\2\13\1\31\1\237\1\240\2"+
    "\1\1\13\1\22\1\145\5\1\1\241\1\242\1\46\2\13\1\143\2\1\1\71\1\54\1\55\1\66"+
    "\1\1\1\243\1\16\21\1\3\13\1\1\1\244\13\1\2\13\1\143\2\1\1\245\2\1\3\13\1\1"+
    "\1\246\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3\13\1\46\20\1"+
    "\71\13\1\75\16\1\14\13\1\140\53\1\2\13\1\143\75\1\44\13\1\107\33\1\43\13\1"+
    "\46\1\13\1\143\7\1\1\13\1\144\1\1\3\13\1\1\1\140\1\1\1\150\1\247\1\13\67\1"+
    "\4\13\1\47\1\67\3\1\1\150\6\1\1\16\77\1\6\13\1\30\1\120\1\46\1\75\66\1\5\13"+
    "\1\205\3\13\1\137\1\250\1\251\1\252\3\13\1\253\1\254\1\13\1\255\1\256\1\36"+
    "\24\13\1\257\1\13\1\36\1\127\1\13\1\127\1\13\1\205\1\13\1\205\1\143\1\13\1"+
    "\143\1\13\1\55\1\13\1\55\1\13\1\207\3\1\14\13\1\47\123\1\1\252\1\13\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\266\1\145\1\267\1\145\24\1\55\13\1\107\2"+
    "\1\103\13\1\47\15\13\1\144\150\13\1\16\25\1\41\13\1\144\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\20\1\3\1\22\1\23\1\4\22\0\1\20\1\41\1\36\1\11\1\13\1\7\1\107\1\35"+
    "\1\24\1\26\1\25\1\31\1\103\1\50\1\27\1\21\1\15\11\5\1\44\1\104\1\45\1\46\1"+
    "\47\1\106\1\40\4\6\1\30\1\32\5\1\1\33\10\1\1\17\2\1\1\16\2\1\1\37\1\34\1\105"+
    "\1\12\1\2\1\43\1\52\1\53\1\73\1\67\1\60\1\76\1\72\1\100\1\64\1\1\1\101\1\74"+
    "\1\71\1\66\1\62\1\57\1\77\1\61\1\54\1\55\1\70\1\63\1\65\1\75\1\56\1\102\1"+
    "\10\1\42\1\14\1\51\6\0\1\22\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12\1\4"+
    "\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1"+
    "\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1\1\6\0\10"+
    "\1\10\0\13\1\5\0\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\2\1\1"+
    "\0\16\1\15\0\11\1\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0\1\1\11\0\1"+
    "\1\3\0\1\1\7\0\11\1\7\0\5\1\17\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1\4\0\10\1\2"+
    "\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1"+
    "\5\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3\0\3\1\20\0\11"+
    "\1\1\0\2\1\1\0\2\1\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0"+
    "\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14"+
    "\1\13\0\10\1\1\0\2\1\10\0\3\1\5\0\4\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2"+
    "\0\1\1\21\0\1\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2"+
    "\1\15\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1"+
    "\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1\1\0"+
    "\24\1\13\0\5\1\3\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1"+
    "\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2"+
    "\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1"+
    "\0\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1\1\3\0\11\1\1\0\1\1\5\0\17\1\1\0\16"+
    "\1\2\0\14\1\13\0\1\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3\0\2\1\11"+
    "\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3"+
    "\0\4\1\2\0\6\1\14\0\2\22\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1"+
    "\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1"+
    "\4\0\2\1\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0"+
    "\5\1\5\0\2\1\3\0\7\1\6\0\3\1\12\0\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1"+
    "\0\4\1\1\0\4\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\0\5\1\1\0\3\1\1"+
    "\0\10\1\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30"+
    "\0\3\1\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1"+
    "\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2"+
    "\0\3\1\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1"+
    "\1\0\14\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12"+
    "\1\3\0\1\1\12\0\4\1\25\0\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0"+
    "\2\1\14\0\3\1\4\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1"+
    "\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7"+
    "\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1"+
    "\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5"+
    "\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\1\1\30\21\1\1\31\1\32\1\33"+
    "\1\34\1\1\4\35\1\36\1\3\2\37\2\40\1\41"+
    "\1\42\22\0\1\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\15\1\51\1\52\2\15\1\53\2\16\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\1\1\1\70\23\1\1\71"+
    "\1\1\1\72\2\1\1\73\1\1\1\74\7\1\1\75"+
    "\12\1\1\76\1\1\1\77\1\100\1\101\1\0\1\102"+
    "\2\37\7\0\1\103\21\0\2\43\1\0\1\104\1\105"+
    "\2\0\1\106\1\107\1\110\2\1\1\111\1\1\1\112"+
    "\4\1\1\113\2\1\1\114\12\1\1\115\3\1\1\116"+
    "\1\112\2\1\1\117\1\120\14\1\1\121\1\122\5\1"+
    "\1\123\1\76\20\0\1\124\3\0\1\125\5\0\1\126"+
    "\1\43\2\44\1\127\1\130\16\1\1\131\1\132\7\1"+
    "\1\133\4\1\1\134\2\1\1\120\4\1\1\135\1\1"+
    "\1\136\7\1\1\137\1\1\1\121\1\1\1\121\1\1"+
    "\1\140\1\1\1\123\1\0\1\141\3\0\1\142\1\143"+
    "\34\0\1\144\1\145\5\1\1\146\1\147\7\1\1\150"+
    "\1\131\3\1\1\120\10\1\1\151\1\1\1\152\5\1"+
    "\1\153\1\154\10\1\1\137\1\1\1\155\1\156\1\157"+
    "\1\0\1\160\1\161\1\162\4\0\1\163\1\0\1\164"+
    "\2\0\1\165\2\0\1\124\1\0\1\124\7\0\1\166"+
    "\1\125\3\0\1\167\4\0\1\126\1\0\3\1\1\170"+
    "\1\171\1\172\1\173\6\1\1\152\1\137\1\174\1\175"+
    "\1\176\4\1\1\177\4\1\1\200\1\201\5\1\1\202"+
    "\1\1\1\203\3\0\1\204\1\205\1\206\3\0\1\207"+
    "\1\210\1\211\4\0\1\125\5\0\2\212\1\213\1\214"+
    "\1\215\1\216\1\217\1\220\1\1\1\221\12\1\1\222"+
    "\1\1\1\0\1\223\1\224\6\0\1\225\1\226\5\0"+
    "\2\1\1\227\1\1\2\230\1\231\2\232\1\233\1\234"+
    "\1\0\1\235\2\0\1\236\1\237\4\0\1\240\1\0"+
    "\1\241\1\242\1\0\1\243\7\0\1\244\1\245\1\246"+
    "\1\247\3\0\1\212\2\0\1\250\2\0\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\330\0\u0168\0\u01b0"+
    "\0\u01f8\0\330\0\u0240\0\u0288\0\330\0\u02d0\0\u0318\0\u0360"+
    "\0\330\0\u03a8\0\330\0\u03f0\0\u0438\0\330\0\u0480\0\u04c8"+
    "\0\330\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\330"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8"+
    "\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\u0b88\0\330\0\330\0\330\0\u0bd0\0\u0c18\0\u0c60"+
    "\0\u0ca8\0\330\0\330\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\330"+
    "\0\330\0\330\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78"+
    "\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8"+
    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1518\0\u1518\0\u1560\0\330"+
    "\0\u1518\0\u15a8\0\330\0\330\0\330\0\330\0\u15f0\0\330"+
    "\0\330\0\330\0\u1638\0\u1680\0\u16c8\0\330\0\u1710\0\330"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950"+
    "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90"+
    "\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u0120\0\u1d40\0\u0120"+
    "\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u0120\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u0120\0\u20a0\0\u20e8\0\u2130"+
    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u23b8\0\330\0\u2400\0\330\0\u0ca8\0\330\0\u2448\0\u2490"+
    "\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0"+
    "\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\330\0\330\0\u2cb8\0\u2d00"+
    "\0\330\0\330\0\330\0\u2d48\0\u2d90\0\u0120\0\u2dd8\0\u0120"+
    "\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u0120\0\u2f40\0\u2f88\0\u0120"+
    "\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8"+
    "\0\u3210\0\u3258\0\u0120\0\u32a0\0\u32e8\0\u3330\0\u0120\0\u3378"+
    "\0\u33c0\0\u3408\0\u0120\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570"+
    "\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0"+
    "\0\u37f8\0\u0120\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u39a8"+
    "\0\u0120\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0"+
    "\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0"+
    "\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020"+
    "\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\330\0\u41d0\0\330"+
    "\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410"+
    "\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650"+
    "\0\u0120\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848"+
    "\0\u0120\0\u4890\0\u48d8\0\u4920\0\u4968\0\330\0\u49b0\0\u49f8"+
    "\0\330\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u0120"+
    "\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8"+
    "\0\u4e30\0\330\0\u4e78\0\u0120\0\u4ec0\0\330\0\u4f08\0\330"+
    "\0\u4f50\0\330\0\u4f98\0\u4fe0\0\u5028\0\330\0\u5070\0\u50b8"+
    "\0\u5100\0\u5148\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8"+
    "\0\u5340\0\u5388\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538"+
    "\0\u5580\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778"+
    "\0\u57c0\0\u5808\0\u5850\0\u5898\0\330\0\u58e0\0\u5928\0\u5970"+
    "\0\u59b8\0\u5a00\0\330\0\u0120\0\u5a48\0\u5a90\0\u5ad8\0\u5b20"+
    "\0\u5b68\0\u5bb0\0\u5bf8\0\u0120\0\330\0\u5c40\0\u5c88\0\u5cd0"+
    "\0\u0120\0\u5d18\0\u5d60\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u5ec8"+
    "\0\u5f10\0\330\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u6078\0\u60c0"+
    "\0\u6108\0\u0120\0\u6150\0\u6198\0\u61e0\0\u6228\0\u6270\0\u62b8"+
    "\0\u6300\0\u6348\0\u6390\0\330\0\u63d8\0\u0120\0\330\0\330"+
    "\0\u6420\0\330\0\330\0\330\0\u6468\0\u64b0\0\u64f8\0\u6540"+
    "\0\330\0\u6588\0\330\0\u65d0\0\u6618\0\330\0\u6660\0\u66a8"+
    "\0\330\0\u66f0\0\u6738\0\u6780\0\u67c8\0\u6810\0\u6858\0\u68a0"+
    "\0\u68e8\0\u6930\0\330\0\330\0\u6978\0\u69c0\0\u6a08\0\330"+
    "\0\u6a50\0\u6a98\0\u6ae0\0\u6b28\0\330\0\u6b70\0\u6bb8\0\u6c00"+
    "\0\u6c48\0\u0120\0\u0120\0\u0120\0\u0120\0\u6c90\0\u6cd8\0\u6d20"+
    "\0\u6d68\0\u6db0\0\u6df8\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u6e40\0\u6e88\0\u6ed0\0\u6f18\0\u0120\0\u6f60\0\u6fa8\0\u6ff0"+
    "\0\u7038\0\330\0\u0120\0\u7080\0\u70c8\0\u7110\0\u7158\0\u71a0"+
    "\0\u0120\0\u71e8\0\330\0\u7230\0\u7278\0\u72c0\0\330\0\330"+
    "\0\330\0\u7308\0\u7350\0\u7398\0\u73e0\0\330\0\330\0\u7428"+
    "\0\u7470\0\u74b8\0\u7500\0\u7548\0\u7590\0\u75d8\0\u7620\0\u7668"+
    "\0\u76b0\0\u0120\0\u76f8\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u7740\0\u0120\0\u7788\0\u77d0\0\u7818\0\u7860\0\u78a8"+
    "\0\u78f0\0\u7938\0\u7980\0\u79c8\0\u7a10\0\u0120\0\u7a58\0\u7aa0"+
    "\0\330\0\330\0\u7ae8\0\u7b30\0\u7b78\0\u7bc0\0\u7c08\0\u7c50"+
    "\0\330\0\330\0\u7c98\0\u7ce0\0\u7d28\0\u7d70\0\u7db8\0\u7e00"+
    "\0\u7e48\0\u0120\0\u7e90\0\u0120\0\u7ed8\0\u0120\0\u0120\0\u7f20"+
    "\0\u0120\0\330\0\u7f68\0\330\0\u7fb0\0\u7ff8\0\330\0\330"+
    "\0\u8040\0\u8088\0\u80d0\0\u8118\0\330\0\u8160\0\u0120\0\u0120"+
    "\0\u81a8\0\330\0\u81f0\0\u8238\0\u8280\0\u82c8\0\u8310\0\u8358"+
    "\0\u83a0\0\u83e8\0\330\0\330\0\330\0\u8430\0\u8478\0\u84c0"+
    "\0\330\0\u8508\0\u8550\0\330\0\u8598\0\u85e0\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\5\1\11\1\12"+
    "\1\13\1\4\1\14\1\15\1\16\2\5\1\6\1\17"+
    "\1\4\1\6\1\20\1\4\1\21\1\22\1\5\1\4"+
    "\2\5\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\5\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\5\1\56\1\5"+
    "\1\57\1\60\1\5\1\61\4\5\1\62\1\63\1\64"+
    "\1\65\1\66\110\4\24\67\1\70\1\71\1\72\61\67"+
    "\111\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\31\5\10\0\1\73\111\0\1\10"+
    "\7\0\1\10\1\0\1\74\7\0\1\75\1\76\2\0"+
    "\1\74\24\0\1\76\7\0\1\74\3\0\1\74\23\0"+
    "\1\77\3\0\1\100\7\0\1\101\122\0\1\102\12\0"+
    "\1\103\2\0\1\104\1\0\1\105\1\106\3\0\1\107"+
    "\2\0\1\110\1\111\71\0\1\112\1\113\1\114\1\115"+
    "\2\0\1\116\1\117\1\0\1\120\3\0\1\121\1\0"+
    "\1\122\1\0\1\123\1\124\20\0\1\10\7\0\1\10"+
    "\1\125\1\74\7\0\1\75\1\76\2\0\1\74\24\0"+
    "\1\76\7\0\1\74\3\0\1\74\1\125\33\0\1\126"+
    "\3\0\1\127\107\0\1\130\67\0\1\131\7\0\1\131"+
    "\11\0\1\132\15\0\1\133\42\0\3\134\2\0\3\134"+
    "\1\135\13\134\1\136\7\134\1\137\1\140\1\134\1\141"+
    "\50\134\34\25\1\142\1\25\1\143\51\25\10\0\1\144"+
    "\13\0\1\145\12\0\1\146\51\0\2\147\3\0\1\147"+
    "\7\0\2\147\10\0\1\147\1\0\2\147\16\0\31\147"+
    "\31\0\1\150\130\0\1\151\111\0\1\152\61\0\1\153"+
    "\23\0\1\154\1\0\1\155\67\0\1\156\125\0\1\157"+
    "\1\0\1\160\41\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\1\5\1\161\1\162"+
    "\11\5\1\163\1\164\4\5\1\165\6\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\6\5\1\166\22\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\3\5"+
    "\1\167\1\170\3\5\1\171\1\5\1\172\6\5\1\173"+
    "\7\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\4\5\1\174\2\5\1\175"+
    "\16\5\1\176\1\177\1\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\7\5"+
    "\1\200\1\201\20\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\14\5\1\202"+
    "\5\5\1\203\1\204\5\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\6\5"+
    "\1\205\22\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\5\5\1\206\3\5"+
    "\1\207\12\5\1\210\4\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\1\211"+
    "\11\5\1\212\16\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\14\5\1\213"+
    "\2\5\1\214\4\5\1\215\4\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\7\5\1\216\2\5\1\217\13\5\1\220\2\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\3\5\1\221\4\5\1\222\20\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\1\223\3\5\1\224\3\5\1\225\20\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\1\226\30\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\1\227\21\5\1\230\6\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\1\231"+
    "\5\5\1\232\1\5\1\233\11\5\1\234\6\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\7\5\1\235\1\236\1\5\1\237\1\5"+
    "\1\240\1\5\1\241\12\5\31\0\1\242\64\0\2\243"+
    "\3\0\1\243\7\0\2\243\10\0\1\243\1\0\2\243"+
    "\16\0\31\243\5\0\24\67\3\0\61\67\25\0\1\244"+
    "\107\0\1\245\1\246\100\0\1\74\13\0\1\74\34\0"+
    "\1\74\3\0\1\74\20\0\1\75\7\0\1\75\12\0"+
    "\1\76\1\0\2\247\24\0\1\76\13\0\1\247\1\0"+
    "\1\247\16\0\1\250\7\0\1\250\13\0\1\250\2\247"+
    "\14\0\1\250\23\0\1\247\1\0\1\247\22\0\3\100"+
    "\150\0\1\251\133\0\1\252\70\0\1\253\107\0\1\254"+
    "\4\0\1\255\5\0\1\256\101\0\1\257\7\0\1\260"+
    "\71\0\1\261\115\0\1\262\102\0\1\263\107\0\1\264"+
    "\126\0\1\265\67\0\1\266\7\0\1\267\114\0\1\270"+
    "\1\271\63\0\1\272\5\0\1\273\122\0\1\274\74\0"+
    "\1\275\105\0\1\276\113\0\1\277\101\0\1\300\7\0"+
    "\1\301\2\0\1\121\25\0\2\125\6\0\1\125\1\0"+
    "\1\74\10\0\1\125\1\0\1\125\1\74\16\0\2\125"+
    "\4\0\1\125\6\0\1\125\1\74\2\0\1\125\1\74"+
    "\1\0\1\125\11\0\3\302\2\0\14\302\1\303\66\302"+
    "\25\127\1\304\62\127\25\0\1\305\67\0\1\131\7\0"+
    "\1\131\12\0\1\76\1\0\2\247\24\0\1\76\13\0"+
    "\1\247\1\0\1\247\40\0\1\306\127\0\1\307\40\0"+
    "\3\134\2\0\27\134\1\137\1\140\55\134\2\0\103\134"+
    "\110\25\1\0\2\147\2\0\2\147\6\0\3\147\10\0"+
    "\1\147\1\0\2\147\16\0\31\147\53\0\1\310\110\0"+
    "\1\311\107\0\1\312\107\0\1\313\41\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\2\5\1\314\26\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\2\5\1\315"+
    "\26\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\15\5\1\316\13\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\15\5\1\317\13\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\22\5\1\320\6\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\20\5\1\321"+
    "\10\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\1\322\30\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\17\5\1\323\11\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\7\5"+
    "\1\324\21\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\24\5\1\325\4\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\1\326\30\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\5\5\1\327\23\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\4\5\1\330"+
    "\24\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\331\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\12\5\1\332\16\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\1\333\5\5\1\334\1\5\1\335\1\336\1\337\6\5"+
    "\1\340\2\5\1\341\4\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\2\5"+
    "\1\342\26\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\15\5\1\343\13\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\2\5\1\344\26\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\3\5\1\345\10\5\1\320\4\5\1\346\7\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\21\5\1\347\2\5\1\350\1\351"+
    "\3\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\352\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\7\5\1\353\12\5\1\354\6\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\6\5\1\355\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\24\5\1\356\4\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\5\5\1\357"+
    "\23\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\3\5\1\320\25\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\3\5\1\360\25\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\6\5\1\361\3\5\1\362\16\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\17\5\1\320\11\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\14\5\1\363"+
    "\14\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\3\5\1\364\25\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\14\5\1\365\14\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\21\5\1\366\7\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\2\5\1\367"+
    "\26\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\1\370\30\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\17\5\1\371\11\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\3\5"+
    "\1\372\25\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\21\5\1\373\7\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\1\374\30\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\6\5\1\375\22\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\7\5\1\376"+
    "\12\5\1\377\6\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\23\5\1\u0100"+
    "\5\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\23\5\1\u0101\5\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\14\5\1\u0101\14\5\6\0\2\243\2\0"+
    "\2\243\6\0\3\243\10\0\1\243\1\0\2\243\16\0"+
    "\31\243\37\0\2\247\40\0\1\247\1\0\1\247\16\0"+
    "\1\250\7\0\1\250\14\0\2\247\40\0\1\247\1\0"+
    "\1\247\65\0\1\u0102\113\0\1\u0103\113\0\1\u0104\104\0"+
    "\1\u0105\115\0\1\u0106\74\0\1\u0107\7\0\1\u0108\116\0"+
    "\1\u0109\102\0\1\u010a\1\u010b\116\0\1\u010c\100\0\1\u010d"+
    "\101\0\1\u010e\106\0\1\u010f\111\0\1\u0110\116\0\1\u0111"+
    "\75\0\1\u0112\105\0\1\u0113\130\0\1\u0114\75\0\1\u0115"+
    "\116\0\1\u0116\76\0\1\u0117\121\0\1\u0118\107\0\1\u0119"+
    "\1\0\1\u011a\77\0\1\u011b\76\0\1\u011c\106\0\1\300"+
    "\33\0\3\302\2\0\106\302\2\0\14\302\1\u011d\66\302"+
    "\21\127\1\u011e\3\127\1\u011f\62\127\27\0\1\u0120\127\0"+
    "\1\u0121\41\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\3\5\1\u0122\1\5\1\u0123"+
    "\3\5\1\u0124\17\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\16\5\1\u0125"+
    "\12\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\7\5\1\u0126\21\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\12\5\1\u0127\16\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\3\5\1\u0128\11\5\1\u0129\3\5\1\u012a\1\u012b\6\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\6\5\1\u012c\3\5\1\u012d\16\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\3\5\1\u012e\25\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\2\5\1\u012f\26\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\6\5"+
    "\1\u0130\22\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\14\5\1\u0131\14\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\14\5\1\u0132\14\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\23\5\1\u0133\5\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\24\5"+
    "\1\u0134\4\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\5\5\1\u0135\23\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\1\u0136\30\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\17\5\1\u0137\11\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\1\u0138\30\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\14\5\1\u0101\1\5\1\241\12\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\3\5\1\334\25\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\6\5\1\u0139\22\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\4\5"+
    "\1\u013a\1\5\1\u013b\2\5\1\u013c\17\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\6\5\1\u013d\22\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\4\0\1\u013e"+
    "\11\0\31\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\16\5\1\u013f\12\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\7\5\1\u0140\21\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\u0141\2\5"+
    "\14\0\1\u0141\1\0\31\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\13\5"+
    "\1\u0142\15\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\12\5\1\u0143\16\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\10\5\1\u0144\11\5\1\u0145\6\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\26\5\1\u0146\2\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\7\5\1\u0147\4\5\1\u0148\14\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\22\5\1\u0149\6\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\24\5"+
    "\1\u014a\4\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\1\u014b\30\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\22\5\1\u014c\6\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\7\5\1\u014d\5\5\1\u014e\13\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\3\5\1\u014f\2\5\1\u0150\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\2\5\1\u0151\26\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\4\0\1\u0152\11\0"+
    "\31\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\1\u0153\30\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\17\5\1\u0154\11\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\6\5"+
    "\1\u0155\22\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\5\0\1\u0156\2\0\1\5\1\0\2\5\16\0\31\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\15\5\1\u0157\13\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\4\0\1\u0158\11\0\31\5\65\0\1\u0159\115\0\1\u015a"+
    "\107\0\1\u015b\103\0\1\u015c\111\0\1\u015d\103\0\1\u015e"+
    "\125\0\1\u015f\105\0\1\u0160\102\0\1\u0161\100\0\1\u0162"+
    "\113\0\1\u0163\103\0\1\u0164\106\0\1\u0165\102\0\1\u0166"+
    "\122\0\1\u0167\101\0\1\u0168\32\0\1\u0169\71\0\1\u016a"+
    "\71\0\1\u016b\1\0\1\u016c\2\0\1\u016d\5\0\1\u016e"+
    "\4\0\1\u016f\2\0\1\u0170\77\0\1\u0171\72\0\1\u0172"+
    "\35\0\1\u0173\57\0\1\u0174\104\0\1\u0175\102\0\1\u0176"+
    "\117\0\1\u0177\111\0\1\u0178\3\0\1\u0179\74\0\1\u017a"+
    "\34\0\1\u017b\105\0\3\u011d\2\u017c\15\u011d\2\302\64\u011d"+
    "\25\127\1\u011f\62\127\47\0\1\u017d\41\0\2\5\2\0"+
    "\2\5\6\0\1\u017e\2\5\10\0\1\5\1\0\2\5"+
    "\16\0\4\5\1\u017f\24\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\7\5"+
    "\1\u0180\21\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\3\5\1\u0122\6\5"+
    "\1\u0181\16\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\17\5\1\u0182\11\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\4\0\1\u0183\11\0\31\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\14\5\1\u0184\14\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\12\5"+
    "\1\u0185\16\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\6\5\1\u0186\22\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\2\5\1\u0187\26\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\10\5\1\u0188\20\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\22\5"+
    "\1\u0189\6\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\14\5\1\u018a\14\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\15\5\1\u018b\13\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\6\5\1\u018c\22\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\u018d\2\5\14\0\1\u018d"+
    "\1\0\15\5\1\u018e\13\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\15\5"+
    "\1\u018f\13\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\12\5\1\u0101\16\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\12\5\1\u0190\16\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\15\5\1\u018e\13\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\7\5"+
    "\1\353\12\5\1\u0191\6\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\5\5"+
    "\1\u0192\23\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\2\5\1\u0193\26\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\5\5\1\u0194\23\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\7\5\1\u0195\21\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\1\u0196"+
    "\30\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\5\5\1\u0197\23\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\12\5\1\u0198\16\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\22\5\1\u0199\6\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\4\0\1\u019a\11\0"+
    "\3\5\1\u019b\11\5\1\u018e\13\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\23\5\1\u019c\5\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\7\5\1\u019d"+
    "\21\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\u019e\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\3\5\1\u019f\1\5\1\u01a0\3\5\1\u01a1"+
    "\17\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\u01a2\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\6\5\1\u01a3\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\12\5\1\u01a4\16\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\2\5\1\u01a5"+
    "\1\u01a6\1\5\1\u01a7\3\5\1\u01a8\17\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\10\5\1\u01a9\20\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\10\5"+
    "\1\u01aa\20\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\6\5\1\u01ab\22\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\24\5\1\241\4\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\u01ac\2\5"+
    "\14\0\1\u01ac\1\0\31\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\2\5"+
    "\1\u01ad\26\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\22\5\1\u01ae\6\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\4\0\1\u01af\11\0\31\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\4\0\1\u01b0\11\0\31\5\66\0\1\u01b1\103\0\1\u01b2"+
    "\113\0\1\u01b3\124\0\1\u01b4\77\0\1\u01b5\1\u01b6\110\0"+
    "\1\u01b7\77\0\1\u01b8\125\0\1\u01b9\77\0\1\u01ba\117\0"+
    "\1\u01bb\65\0\1\u01bc\1\u01bd\133\0\1\u01be\63\0\1\u01bf"+
    "\112\0\1\u01c0\104\0\1\u01c1\5\0\1\u01c2\104\0\1\u01c3"+
    "\106\0\1\u01c4\111\0\1\u01c5\100\0\1\u01c6\130\0\1\u01c7"+
    "\107\0\1\u01c8\100\0\1\u01c9\75\0\1\u01ca\115\0\1\u01cb"+
    "\104\0\1\u01cc\5\0\1\u01cd\105\0\1\u01ce\104\0\1\u01cf"+
    "\107\0\1\u01d0\124\0\1\u01d1\110\0\1\u01d2\101\0\1\u01d3"+
    "\105\0\1\u01d4\100\0\1\u01d5\5\0\1\u01d6\24\0\22\u017c"+
    "\2\0\64\u017c\1\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\4\5\1\u017f\24\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\5\5\1\u01d7\23\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\10\5\1\u01d8\20\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\6\5"+
    "\1\u01d9\22\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\6\5\1\u01da\22\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\21\5\1\u01db\7\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\24\5\1\u01dc\4\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\3\5"+
    "\1\u01dd\25\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\1\u01de\30\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\12\5\1\u01df\16\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\3\5\1\u01e0\25\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\6\5\1\u01e1"+
    "\22\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\u01e2\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\6\5\1\u01e3\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\23\5\1\u01e4\5\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\22\5\1\u0145"+
    "\6\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\u01e5\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\6\5\1\u01e6\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\14\5\1\u01e7\14\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\7\5\1\u01e8"+
    "\21\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\3\5\1\u01e9\25\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\7\5\1\u01ea\21\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\10\5\1\u01eb\20\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\4\5\1\u01ec"+
    "\24\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\7\5\1\u01e4\12\5\1\u01e4"+
    "\6\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\3\5\1\u01ed\25\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\17\5\1\u01ee\11\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\4\5\1\u01ef\24\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\7\5\1\u01f0"+
    "\21\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\12\5\1\u01f1\16\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\5\0\1\u01f2\2\0"+
    "\1\5\1\0\2\5\16\0\31\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\23\5\1\u01f3\5\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\10\5\1\u01f4"+
    "\20\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\4\5\1\u01f5\24\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\7\5\1\u01f6\21\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\3\5\1\u01a6\6\5\1\u01f7\16\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\1\u01f8\30\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\15\5\1\u014e\13\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\24\5\1\u01f9\4\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\15\5\1\u01fa\13\5\62\0\1\u01fb\121\0\1\u01fc"+
    "\100\0\1\u01fd\116\0\1\u01fe\116\0\1\u01ff\71\0\1\u0200"+
    "\131\0\1\u0201\66\0\1\u0202\104\0\1\u0203\117\0\1\u0204"+
    "\76\0\1\u01c1\34\0\1\u0169\165\0\1\u0205\115\0\1\u0206"+
    "\115\0\1\u0207\65\0\1\u0208\107\0\1\u0209\123\0\1\u020a"+
    "\75\0\1\u020b\110\0\1\u01cc\121\0\1\u020c\100\0\1\u020d"+
    "\101\0\1\u020e\115\0\1\u020f\122\0\1\u0210\102\0\1\u0211"+
    "\76\0\1\u01d5\33\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\6\5\1\u0212\22\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\5\5\1\u0212\23\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\13\5\1\u0213\15\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\15\5"+
    "\1\u0214\13\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\17\5\1\u0215\11\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\7\5\1\u0216\21\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\24\5\1\u0217\4\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\24\5"+
    "\1\u0218\4\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\24\5\1\u0219\4\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\12\5\1\u021a\16\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\6\5\1\u021b\22\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\1\u021c"+
    "\30\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\5\5\1\u021d\23\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\6\5\1\u021e\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\5\5\1\u021f\23\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\10\5\1\u0220"+
    "\20\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\u0221\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\7\5\1\u0222\21\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\5\5\1\u0223\23\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\10\5\1\u0224"+
    "\20\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\6\5\1\u0225\22\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\15\5\1\u0226\13\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\6\5\1\u0227\22\5\65\0\1\u0228\125\0\1\u0229\71\0"+
    "\1\u022a\103\0\1\u022b\112\0\1\u022c\113\0\1\u022d\26\0"+
    "\1\u022e\201\0\1\u022f\107\0\1\u0230\102\0\1\u0231\121\0"+
    "\1\u0232\10\0\1\u0173\173\0\1\u0233\76\0\1\u0234\120\0"+
    "\1\u0235\76\0\1\u0236\122\0\1\u0237\20\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\3\5\1\u0238\25\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\10\5\1\u0239"+
    "\20\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\15\5\1\u023a\13\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\6\5\1\u0135\22\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\14\5\1\u023b\14\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\6\5\1\u023c"+
    "\22\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\5\5\1\u023c\23\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\13\5\1\u023d\15\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\3\5\1\u023e\25\5\6\0\2\5\2\0\2\5\6\0"+
    "\3\5\10\0\1\5\1\0\2\5\16\0\6\5\1\u023f"+
    "\22\5\6\0\2\5\2\0\2\5\6\0\3\5\10\0"+
    "\1\5\1\0\2\5\16\0\5\5\1\u023f\23\5\6\0"+
    "\2\5\2\0\2\5\6\0\3\5\10\0\1\5\1\0"+
    "\2\5\16\0\13\5\1\u0240\15\5\6\0\2\5\2\0"+
    "\2\5\6\0\3\5\10\0\1\5\1\0\2\5\16\0"+
    "\21\5\1\u0241\7\5\103\0\1\u0242\75\0\1\u0243\103\0"+
    "\1\u0244\107\0\1\u0245\103\0\1\u0246\127\0\1\u0247\107\0"+
    "\1\u0248\76\0\1\u0249\110\0\1\u024a\75\0\1\u024b\121\0"+
    "\1\u024c\103\0\1\u024d\30\0\2\5\2\0\2\5\6\0"+
    "\1\u017e\2\5\10\0\1\5\1\0\2\5\4\0\1\u024e"+
    "\11\0\4\5\1\u017f\24\5\6\0\2\5\2\0\2\5"+
    "\6\0\3\5\10\0\1\5\1\0\2\5\16\0\14\5"+
    "\1\u024f\14\5\6\0\2\5\2\0\2\5\6\0\3\5"+
    "\10\0\1\5\1\0\2\5\16\0\3\5\1\u0250\25\5"+
    "\6\0\2\5\2\0\2\5\6\0\3\5\10\0\1\5"+
    "\1\0\2\5\16\0\3\5\1\u019f\25\5\6\0\2\5"+
    "\2\0\2\5\6\0\3\5\10\0\1\5\1\0\2\5"+
    "\16\0\3\5\1\u01a6\25\5\107\0\1\u0251\66\0\1\u0252"+
    "\103\0\1\u0253\34\0\1\u0254\167\0\1\u0255\116\0\1\u0256"+
    "\100\0\1\u0257\103\0\1\u0258\111\0\1\u0201\110\0\1\u0259"+
    "\111\0\1\u025a\112\0\1\u025b\101\0\1\u025c\115\0\1\u025d"+
    "\100\0\1\u025e\120\0\1\u025f\74\0\1\u0260\112\0\1\u0261"+
    "\122\0\1\u0262\40\0\1\u0263\140\0\1\u0264\115\0\1\u0265"+
    "\101\0\1\u0266\60\0\1\u0267\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\3\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\6\1\1\11\22\1\3\11\4\1\2\11\4\1\3\11"+
    "\22\0\13\1\1\11\2\1\4\11\1\1\3\11\1\0"+
    "\2\1\1\11\1\1\1\11\61\1\1\11\1\1\1\11"+
    "\1\0\1\11\2\1\7\0\1\1\21\0\2\1\1\0"+
    "\2\11\2\0\3\11\66\1\20\0\1\1\3\0\1\1"+
    "\5\0\2\1\1\11\1\1\1\11\35\1\1\11\2\1"+
    "\1\11\20\1\1\11\3\1\1\11\1\1\1\11\1\0"+
    "\1\11\3\0\1\11\1\1\34\0\1\1\1\11\5\1"+
    "\1\11\11\1\1\11\14\1\1\11\21\1\1\11\2\1"+
    "\2\11\1\0\3\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\1\7\0\2\11\3\0"+
    "\1\11\4\0\1\11\1\0\33\1\1\11\10\1\1\11"+
    "\3\0\3\11\3\0\1\1\2\11\4\0\1\1\5\0"+
    "\26\1\1\0\2\11\6\0\2\11\5\0\12\1\1\11"+
    "\1\0\1\11\2\0\2\11\4\0\1\11\1\0\2\1"+
    "\1\0\1\11\7\0\1\1\3\11\3\0\1\11\2\0"+
    "\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int openCommentCount;
    private IElementType nestingCommentType;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case NESTING_COMMENT: {
              openCommentCount = 0;
                              yybegin(YYINITIAL);
                              return nestingCommentType;
            }
            case 616: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ATSTokenTypes.IDENTIFIER;
            }
          case 169: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 170: break;
          case 3: 
            { return ATSTokenTypes.INT;
            }
          case 171: break;
          case 4: 
            { return ATSTokenTypes.PERCENT;
            }
          case 172: break;
          case 5: 
            { return ATSTokenTypes.LBRACE;
            }
          case 173: break;
          case 6: 
            { return ATSTokenTypes.HASH;
            }
          case 174: break;
          case 7: 
            { return ATSTokenTypes.DOLLAR;
            }
          case 175: break;
          case 8: 
            { return ATSTokenTypes.RBRACE;
            }
          case 176: break;
          case 9: 
            { return ATSTokenTypes.LPAREN;
            }
          case 177: break;
          case 10: 
            { return ATSTokenTypes.RPAREN;
            }
          case 178: break;
          case 11: 
            { return ATSTokenTypes.DOT;
            }
          case 179: break;
          case 12: 
            { return ATSTokenTypes.BACKSLASH;
            }
          case 180: break;
          case 13: 
            { return ATSTokenTypes.CHAR;
            }
          case 181: break;
          case 14: 
            { return ATSTokenTypes.STRING;
            }
          case 182: break;
          case 15: 
            { return ATSTokenTypes.LBRACKET;
            }
          case 183: break;
          case 16: 
            { return ATSTokenTypes.AT;
            }
          case 184: break;
          case 17: 
            { return ATSTokenTypes.BANG;
            }
          case 185: break;
          case 18: 
            { return ATSTokenTypes.BAR;
            }
          case 186: break;
          case 19: 
            { return ATSTokenTypes.BQUOTE;
            }
          case 187: break;
          case 20: 
            { return ATSTokenTypes.COLON;
            }
          case 188: break;
          case 21: 
            { return ATSTokenTypes.LT;
            }
          case 189: break;
          case 22: 
            { return ATSTokenTypes.EQ;
            }
          case 190: break;
          case 23: 
            { return ATSTokenTypes.GT;
            }
          case 191: break;
          case 24: 
            { return ATSTokenTypes.TILDE;
            }
          case 192: break;
          case 25: 
            { return ATSTokenTypes.COMMA;
            }
          case 193: break;
          case 26: 
            { return ATSTokenTypes.SEMICOLON;
            }
          case 194: break;
          case 27: 
            { return ATSTokenTypes.RBRACKET;
            }
          case 195: break;
          case 28: 
            { return ATSTokenTypes.QMARK;
            }
          case 196: break;
          case 29: 
            { 
            }
          case 197: break;
          case 30: 
            { return ATSTokenTypes.CRLF;
            }
          case 198: break;
          case 31: 
            { return ATSTokenTypes.FLOAT;
            }
          case 199: break;
          case 32: 
            { return ATSTokenTypes.EXTCODE;
            }
          case 200: break;
          case 33: 
            { return ATSTokenTypes.PERCENTLPAREN;
            }
          case 201: break;
          case 34: 
            { return ATSTokenTypes.HASHLBRACKETOLON;
            }
          case 202: break;
          case 35: 
            { return ATSTokenTypes.COMMENT_LINE;
            }
          case 203: break;
          case 36: 
            { return ATSTokenTypes.COMMENT_BLOCK;
            }
          case 204: break;
          case 37: 
            { openCommentCount = 1; nestingCommentType = ATSTokenTypes.COMMENT_BLOCK; yybegin(NESTING_COMMENT);
            }
          case 205: break;
          case 38: 
            { return ATSTokenTypes.DOTINT;
            }
          case 206: break;
          case 39: 
            { return ATSTokenTypes.DOTDOT;
            }
          case 207: break;
          case 40: 
            { return ATSTokenTypes.DOTLT;
            }
          case 208: break;
          case 41: 
            { return ATSTokenTypes.QUOTELBRACE;
            }
          case 209: break;
          case 42: 
            { return ATSTokenTypes.QUOTELPAREN;
            }
          case 210: break;
          case 43: 
            { return ATSTokenTypes.QUOTELBRACKET;
            }
          case 211: break;
          case 44: 
            { return ATSTokenTypes.ATLBRACE;
            }
          case 212: break;
          case 45: 
            { return ATSTokenTypes.ATLPAREN;
            }
          case 213: break;
          case 46: 
            { return ATSTokenTypes.ATLBRACKET;
            }
          case 214: break;
          case 47: 
            { return ATSTokenTypes.VAL_IDENTIFIER;
            }
          case 215: break;
          case 48: 
            { return ATSTokenTypes.BQUOTELPAREN;
            }
          case 216: break;
          case 49: 
            { return ATSTokenTypes.COLONLT;
            }
          case 217: break;
          case 50: 
            { return ATSTokenTypes.GTLT;
            }
          case 218: break;
          case 51: 
            { return ATSTokenTypes.EQLT;
            }
          case 219: break;
          case 52: 
            { return ATSTokenTypes.EQGT;
            }
          case 220: break;
          case 53: 
            { return ATSTokenTypes.GTDOT;
            }
          case 221: break;
          case 54: 
            { return ATSTokenTypes.MINUSLT;
            }
          case 222: break;
          case 55: 
            { return ATSTokenTypes.MINUSGT;
            }
          case 223: break;
          case 56: 
            { return ATSTokenTypes.AS;
            }
          case 224: break;
          case 57: 
            { return ATSTokenTypes.OP;
            }
          case 225: break;
          case 58: 
            { return ATSTokenTypes.OF;
            }
          case 226: break;
          case 59: 
            { return ATSTokenTypes.IN;
            }
          case 227: break;
          case 60: 
            { return ATSTokenTypes.IF;
            }
          case 228: break;
          case 61: 
            { return ATSTokenTypes.DO;
            }
          case 229: break;
          case 62: 
            { return ATSTokenTypes.FUN;
            }
          case 230: break;
          case 63: 
            { return ATSTokenTypes.COMMALPAREN;
            }
          case 231: break;
          case 64: 
            { return ATSTokenTypes.REF_IDENTIFIER;
            }
          case 232: break;
          case 65: 
            { openCommentCount += 1;
            }
          case 233: break;
          case 66: 
            { openCommentCount -= 1;
                              if (openCommentCount == 0) {
                                yybegin(YYINITIAL);
                                return nestingCommentType;
                              }
            }
          case 234: break;
          case 67: 
            { return ATSTokenTypes.SRPIF;
            }
          case 235: break;
          case 68: 
            { openCommentCount = 1; nestingCommentType = ATSTokenTypes.COMMENT_DOC; yybegin(NESTING_COMMENT);
            }
          case 236: break;
          case 69: 
            { return ATSTokenTypes.DOTDOTDOT;
            }
          case 237: break;
          case 70: 
            { return ATSTokenTypes.EQLTGT;
            }
          case 238: break;
          case 71: 
            { return ATSTokenTypes.EQGTGT;
            }
          case 239: break;
          case 72: 
            { return ATSTokenTypes.MINUSLTGT;
            }
          case 240: break;
          case 73: 
            { return ATSTokenTypes.AND;
            }
          case 241: break;
          case 74: 
            { return ATSTokenTypes.DLREFFMASK_ARG;
            }
          case 242: break;
          case 75: 
            { return ATSTokenTypes.SIF;
            }
          case 243: break;
          case 76: 
            { return ATSTokenTypes.TRY;
            }
          case 244: break;
          case 77: 
            { return ATSTokenTypes.END;
            }
          case 245: break;
          case 78: 
            { return ATSTokenTypes.REC;
            }
          case 246: break;
          case 79: 
            { return ATSTokenTypes.VAR;
            }
          case 247: break;
          case 80: 
            { return ATSTokenTypes.VAL;
            }
          case 248: break;
          case 81: 
            { return ATSTokenTypes.LAM;
            }
          case 249: break;
          case 82: 
            { return ATSTokenTypes.LET;
            }
          case 250: break;
          case 83: 
            { return ATSTokenTypes.FIX;
            }
          case 251: break;
          case 84: 
            { return ATSTokenTypes.DLRTUP;
            }
          case 252: break;
          case 85: 
            { return ATSTokenTypes.DLRREC;
            }
          case 253: break;
          case 86: 
            { return ATSTokenTypes.DLRLST;
            }
          case 254: break;
          case 87: 
            { return ATSTokenTypes.DOTLTGTDOT;
            }
          case 255: break;
          case 88: 
            { return ATSTokenTypes.EQSLASHEQGT;
            }
          case 256: break;
          case 89: 
            { return ATSTokenTypes.TYPE;
            }
          case 257: break;
          case 90: 
            { return ATSTokenTypes.THEN;
            }
          case 258: break;
          case 91: 
            { return ATSTokenTypes.ELSE;
            }
          case 259: break;
          case 92: 
            { return ATSTokenTypes.REFAT;
            }
          case 260: break;
          case 93: 
            { return ATSTokenTypes.WITH;
            }
          case 261: break;
          case 94: 
            { return ATSTokenTypes.WHEN;
            }
          case 262: break;
          case 95: 
            { return ATSTokenTypes.CASE;
            }
          case 263: break;
          case 96: 
            { return ATSTokenTypes.FORSTAR;
            }
          case 264: break;
          case 97: 
            { return ATSTokenTypes.SRPTHEN;
            }
          case 265: break;
          case 98: 
            { return ATSTokenTypes.SRPELSE;
            }
          case 266: break;
          case 99: 
            { return ATSTokenTypes.SRPELIF;
            }
          case 267: break;
          case 100: 
            { return ATSTokenTypes.COMMENT_REST;
            }
          case 268: break;
          case 101: 
            { return ATSTokenTypes.EQSLASHEQGTGT;
            }
          case 269: break;
          case 102: 
            { return ATSTokenTypes.ADDRAT;
            }
          case 270: break;
          case 103: 
            { return ATSTokenTypes.BEGIN;
            }
          case 271: break;
          case 104: 
            { return ATSTokenTypes.SCASE;
            }
          case 272: break;
          case 105: 
            { return ATSTokenTypes.VIEWAT;
            }
          case 273: break;
          case 106: 
            { return ATSTokenTypes.FIXITY;
            }
          case 274: break;
          case 107: 
            { return ATSTokenTypes.WHERE;
            }
          case 275: break;
          case 108: 
            { return ATSTokenTypes.WHILE;
            }
          case 276: break;
          case 109: 
            { return ATSTokenTypes.LOCAL;
            }
          case 277: break;
          case 110: 
            { return ATSTokenTypes.FREEAT;
            }
          case 278: break;
          case 111: 
            { return ATSTokenTypes.FOLDAT;
            }
          case 279: break;
          case 112: 
            { return ATSTokenTypes.SRPPRINT;
            }
          case 280: break;
          case 113: 
            { return ATSTokenTypes.SRPERROR;
            }
          case 281: break;
          case 114: 
            { return ATSTokenTypes.SRPENDIF;
            }
          case 282: break;
          case 115: 
            { return ATSTokenTypes.SRPIFDEF;
            }
          case 283: break;
          case 116: 
            { return ATSTokenTypes.SRPUNDEF;
            }
          case 284: break;
          case 117: 
            { return ATSTokenTypes.DLRBREAK;
            }
          case 285: break;
          case 118: 
            { return ATSTokenTypes.DLRRAISE;
            }
          case 286: break;
          case 119: 
            { return ATSTokenTypes.DLRDELAY;
            }
          case 287: break;
          case 120: 
            { return ATSTokenTypes.ASSUME;
            }
          case 288: break;
          case 121: 
            { return ATSTokenTypes.STATIC;
            }
          case 289: break;
          case 122: 
            { return ATSTokenTypes.STADEF;
            }
          case 290: break;
          case 123: 
            { return ATSTokenTypes.STACST;
            }
          case 291: break;
          case 124: 
            { return ATSTokenTypes.EXTYPE;
            }
          case 292: break;
          case 125: 
            { return ATSTokenTypes.EXTERN;
            }
          case 293: break;
          case 126: 
            { return ATSTokenTypes.EXTVAR;
            }
          case 294: break;
          case 127: 
            { return ATSTokenTypes.IMPORT;
            }
          case 295: break;
          case 128: 
            { return ATSTokenTypes.WHILESTAR;
            }
          case 296: break;
          case 129: 
            { return ATSTokenTypes.NONFIX;
            }
          case 297: break;
          case 130: 
            { return ATSTokenTypes.MACDEF;
            }
          case 298: break;
          case 131: 
            { return ATSTokenTypes.SRPASSERT;
            }
          case 299: break;
          case 132: 
            { return ATSTokenTypes.SRPIFNDEF;
            }
          case 300: break;
          case 133: 
            { return ATSTokenTypes.SRPDEFINE;
            }
          case 301: break;
          case 134: 
            { return ATSTokenTypes.DLRARRPSZ;
            }
          case 302: break;
          case 135: 
            { return ATSTokenTypes.DLREXTYPE;
            }
          case 303: break;
          case 136: 
            { return ATSTokenTypes.DLREXTERN;
            }
          case 304: break;
          case 137: 
            { return ATSTokenTypes.DLREXTVAL;
            }
          case 305: break;
          case 138: 
            { return ATSTokenTypes.ABSTYPE;
            }
          case 306: break;
          case 139: 
            { return ATSTokenTypes.SRPSTALOAD;
            }
          case 307: break;
          case 140: 
            { return ATSTokenTypes.SYMELIM;
            }
          case 308: break;
          case 141: 
            { return ATSTokenTypes.SYMINTR;
            }
          case 309: break;
          case 142: 
            { return ATSTokenTypes.SORTDEF;
            }
          case 310: break;
          case 143: 
            { return ATSTokenTypes.TYPEDEF;
            }
          case 311: break;
          case 144: 
            { return ATSTokenTypes.TKINDEF;
            }
          case 312: break;
          case 145: 
            { return ATSTokenTypes.REQUIRE;
            }
          case 313: break;
          case 146: 
            { return ATSTokenTypes.SRPDYNLOAD;
            }
          case 314: break;
          case 147: 
            { return ATSTokenTypes.SRPELIFDEF;
            }
          case 315: break;
          case 148: 
            { return ATSTokenTypes.SRPINCLUDE;
            }
          case 316: break;
          case 149: 
            { return ATSTokenTypes.DLREXTKIND;
            }
          case 317: break;
          case 150: 
            { return ATSTokenTypes.DLREFFMASK;
            }
          case 318: break;
          case 151: 
            { return ATSTokenTypes.OVERLOAD;
            }
          case 319: break;
          case 152: 
            { return ATSTokenTypes.WITHTYPE;
            }
          case 320: break;
          case 153: 
            { return ATSTokenTypes.DATASORT;
            }
          case 321: break;
          case 154: 
            { return ATSTokenTypes.DATATYPE;
            }
          case 322: break;
          case 155: 
            { return ATSTokenTypes.CLASSDEC;
            }
          case 323: break;
          case 156: 
            { return ATSTokenTypes.SRPELIFNDEF;
            }
          case 324: break;
          case 157: 
            { return ATSTokenTypes.DLRSHOWTYPE;
            }
          case 325: break;
          case 158: 
            { return ATSTokenTypes.DLREXTMCALL;
            }
          case 326: break;
          case 159: 
            { return ATSTokenTypes.DLREXTFCALL;
            }
          case 327: break;
          case 160: 
            { return ATSTokenTypes.DLRCONTINUE;
            }
          case 328: break;
          case 161: 
            { return ATSTokenTypes.EXCEPTION;
            }
          case 329: break;
          case 162: 
            { return ATSTokenTypes.IMPLEMENT;
            }
          case 330: break;
          case 163: 
            { return ATSTokenTypes.DLRTEMPENVER;
            }
          case 331: break;
          case 164: 
            { return ATSTokenTypes.DLRVCOPYENV;
            }
          case 332: break;
          case 165: 
            { return ATSTokenTypes.DLRMYLOCATION;
            }
          case 333: break;
          case 166: 
            { return ATSTokenTypes.DLRMYFILENAME;
            }
          case 334: break;
          case 167: 
            { return ATSTokenTypes.DLRMYFUNCTION;
            }
          case 335: break;
          case 168: 
            { return ATSTokenTypes.DLREXTYPE_STRUCT;
            }
          case 336: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
