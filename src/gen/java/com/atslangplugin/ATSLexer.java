/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
//TODO: static import this
import com.atslangplugin.psi.ATSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Holger_2/Documents/Projects/IntelliJATS/src/main/grammar/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;
  public static final int PRAGMA = 4;
  public static final int DEFINE = 6;
  public static final int DEFINE_CONTINUATION = 8;
  public static final int CONTINUATION = 10;
  public static final int NESTING_COMMENT = 12;
  public static final int EXTCODE_FIRST = 14;
  public static final int EXTCODE_REST = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  4,  4, 
     5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\25\1\30\4\13\1\30\1"+
    "\136\1\137\1\16\1\13\1\16\1\13\1\16\1\137\1\67\3\13\1\140\1\1\1\141\4\1\5"+
    "\13\1\27\2\13\1\142\4\13\1\40\1\13\1\143\3\1\1\13\1\144\1\47\2\13\1\145\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\146\5\1\1\104\2\13\1\140\1\147\3\1"+
    "\1\150\1\13\1\151\1\42\2\13\1\40\1\1\2\13\1\140\1\1\1\37\1\42\1\13\1\144\6"+
    "\1\1\152\1\153\14\13\4\1\21\13\1\134\2\13\1\134\1\154\1\13\1\144\3\13\1\155"+
    "\1\156\1\157\1\120\1\156\2\1\1\160\4\1\1\161\1\1\1\120\6\1\1\162\1\163\1\164"+
    "\1\165\1\166\3\1\1\167\147\1\2\13\1\143\2\13\1\143\10\13\1\170\1\171\2\13"+
    "\1\126\3\13\1\172\1\1\1\13\1\107\4\173\4\1\1\103\35\1\1\174\2\1\1\175\1\25"+
    "\4\13\1\176\1\25\4\13\1\127\1\104\1\13\1\144\1\25\4\13\1\143\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4\1\2\13\1\144"+
    "\20\13\1\120\1\13\1\177\1\1\2\13\1\143\1\103\1\13\1\144\4\13\1\40\2\1\1\200"+
    "\1\201\5\13\1\202\1\13\1\144\1\27\3\1\1\200\1\203\1\13\1\31\1\1\3\13\1\140"+
    "\1\201\2\13\1\140\3\1\1\204\1\42\1\13\1\40\1\13\1\107\1\1\1\13\1\120\1\50"+
    "\2\13\1\31\1\103\1\1\1\205\1\206\2\13\1\46\1\1\1\207\1\1\1\13\1\210\3\13\1"+
    "\211\1\212\1\213\1\30\1\64\1\214\1\215\1\173\2\13\1\127\1\40\7\13\1\31\1\1"+
    "\72\13\1\140\1\13\1\216\2\13\1\145\20\1\26\13\1\144\6\13\1\75\2\1\1\107\1"+
    "\217\1\55\1\220\1\221\6\13\1\16\1\1\1\150\25\13\1\144\1\1\4\13\1\201\2\13"+
    "\1\27\2\1\1\145\7\1\1\205\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1\222\4\13\1"+
    "\143\1\223\1\224\2\1\1\225\1\13\1\14\1\226\2\144\2\1\7\13\1\30\30\1\1\13\1"+
    "\120\3\13\1\67\2\1\2\13\1\1\1\13\1\227\2\13\1\40\1\13\1\144\2\13\1\230\3\1"+
    "\11\13\1\144\6\1\2\13\1\27\3\13\1\140\11\1\23\13\1\107\1\13\1\40\1\27\11\1"+
    "\1\231\2\13\1\232\1\13\1\40\1\13\1\107\1\13\1\143\4\1\1\13\1\233\1\13\1\40"+
    "\1\13\1\75\4\1\3\13\1\234\4\1\1\67\1\235\1\13\1\140\2\1\1\13\1\120\1\13\1"+
    "\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4"+
    "\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\150\2\13\1\27\4\1\1\150\2\13\2\1\1"+
    "\13\1\46\1\1\1\150\1\13\1\107\2\1\2\13\1\236\1\150\2\13\1\31\1\237\1\240\2"+
    "\1\1\13\1\22\1\145\5\1\1\241\1\242\1\46\2\13\1\143\2\1\1\71\1\54\1\55\1\66"+
    "\1\1\1\243\1\16\21\1\3\13\1\1\1\244\13\1\2\13\1\143\2\1\1\245\2\1\3\13\1\1"+
    "\1\246\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3\13\1\46\20\1"+
    "\71\13\1\75\16\1\14\13\1\140\53\1\2\13\1\143\75\1\44\13\1\107\33\1\43\13\1"+
    "\46\1\13\1\143\7\1\1\13\1\144\1\1\3\13\1\1\1\140\1\1\1\150\1\247\1\13\67\1"+
    "\4\13\1\47\1\67\3\1\1\150\6\1\1\16\77\1\6\13\1\30\1\120\1\46\1\75\66\1\5\13"+
    "\1\205\3\13\1\137\1\250\1\251\1\252\3\13\1\253\1\254\1\13\1\255\1\256\1\36"+
    "\24\13\1\257\1\13\1\36\1\127\1\13\1\127\1\13\1\205\1\13\1\205\1\143\1\13\1"+
    "\143\1\13\1\55\1\13\1\55\1\13\1\207\3\1\14\13\1\47\123\1\1\252\1\13\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\266\1\145\1\267\1\145\24\1\55\13\1\107\2"+
    "\1\103\13\1\47\15\13\1\144\150\13\1\16\25\1\41\13\1\144\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\3\1\14\1\15\1\4\22\0\1\5\1\42\1\30\1\33\1\36\1\31\1\110\1\27\1"+
    "\16\1\20\1\17\1\23\1\104\1\51\1\21\1\13\1\10\1\6\1\35\7\6\1\45\1\105\1\46"+
    "\1\47\1\50\1\107\1\41\4\7\1\22\1\24\5\1\1\25\10\1\1\12\2\1\1\11\2\1\1\40\1"+
    "\26\1\106\1\34\1\2\1\44\1\53\1\54\1\74\1\70\1\61\1\77\1\73\1\101\1\65\1\1"+
    "\1\102\1\75\1\72\1\67\1\63\1\60\1\100\1\62\1\55\1\56\1\71\1\64\1\66\1\76\1"+
    "\57\1\103\1\32\1\43\1\37\1\52\6\0\1\14\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1"+
    "\1\0\12\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1"+
    "\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0"+
    "\1\1\6\0\10\1\10\0\13\1\5\0\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1"+
    "\2\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0"+
    "\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\17\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1"+
    "\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2"+
    "\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3\0\3"+
    "\1\20\0\11\1\1\0\2\1\1\0\2\1\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2"+
    "\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0"+
    "\3\1\3\0\14\1\13\0\10\1\1\0\2\1\10\0\3\1\5\0\4\1\1\0\5\1\3\0\1\1\3\0\2\1\15"+
    "\0\13\1\2\0\1\1\21\0\1\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1"+
    "\1\1\0\2\1\15\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3"+
    "\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14"+
    "\1\1\0\24\1\13\0\5\1\3\0\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0"+
    "\1\1\1\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0"+
    "\1\1\1\0\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1\1\3\0\11\1\1\0\1\1\5\0\17\1"+
    "\1\0\16\1\2\0\14\1\13\0\1\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3"+
    "\0\2\1\11\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1"+
    "\0\7\1\3\0\4\1\2\0\6\1\14\0\2\14\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1"+
    "\4\0\1\1\4\0\2\1\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2"+
    "\1\12\0\5\1\5\0\2\1\3\0\7\1\6\0\3\1\12\0\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1"+
    "\0\3\1\1\0\4\1\1\0\4\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\0\5\1\1"+
    "\0\3\1\1\0\10\1\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1"+
    "\0\1\1\30\0\3\1\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1"+
    "\0\10\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1"+
    "\2\0\6\1\2\0\3\1\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16"+
    "\1\2\0\1\1\1\0\14\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0"+
    "\3\1\1\0\12\1\3\0\1\1\12\0\4\1\25\0\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1"+
    "\0\17\1\1\0\2\1\14\0\3\1\4\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3"+
    "\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10"+
    "\1\1\0\7\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2"+
    "\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3"+
    "\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\2\2\2\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\21\1\1\31\1\32\1\33\1\34"+
    "\1\1\1\12\4\35\3\36\3\35\1\37\1\3\2\40"+
    "\1\3\1\41\1\42\1\43\1\44\1\45\1\46\1\10"+
    "\1\47\2\10\1\50\1\51\2\11\1\52\1\53\22\0"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\0"+
    "\1\63\1\64\1\65\1\66\1\67\1\1\1\70\23\1"+
    "\1\71\1\1\1\72\2\1\1\73\1\1\1\74\7\1"+
    "\1\75\12\1\1\76\1\1\1\77\1\100\1\101\1\102"+
    "\1\0\1\103\1\104\2\40\2\41\1\0\1\105\1\106"+
    "\10\0\1\107\22\0\1\110\1\111\1\112\2\1\1\113"+
    "\1\1\1\114\4\1\1\115\2\1\1\116\12\1\1\117"+
    "\3\1\1\120\1\114\2\1\1\121\1\122\14\1\1\123"+
    "\1\124\5\1\1\125\1\76\2\101\1\41\2\42\1\0"+
    "\1\126\20\0\1\127\3\0\1\130\5\0\1\131\1\132"+
    "\16\1\1\133\1\134\7\1\1\135\4\1\1\136\2\1"+
    "\1\122\4\1\1\137\1\1\1\140\7\1\1\141\1\1"+
    "\1\123\1\1\1\123\1\1\1\142\1\1\1\125\1\143"+
    "\1\0\1\144\3\0\1\145\1\146\34\0\1\147\5\1"+
    "\1\150\1\151\7\1\1\152\1\133\3\1\1\122\10\1"+
    "\1\153\1\1\1\154\5\1\1\155\1\156\10\1\1\141"+
    "\1\1\1\157\1\160\1\161\1\0\1\162\1\163\1\164"+
    "\4\0\1\165\1\0\1\166\2\0\1\167\2\0\1\127"+
    "\1\0\1\127\7\0\1\170\1\130\3\0\1\171\4\0"+
    "\1\131\1\0\3\1\1\172\1\173\1\174\1\175\6\1"+
    "\1\154\1\141\1\176\1\177\1\200\4\1\1\201\4\1"+
    "\1\202\1\203\5\1\1\204\1\1\1\205\3\0\1\206"+
    "\1\207\1\210\3\0\1\211\1\212\1\213\4\0\1\130"+
    "\5\0\2\214\1\215\1\216\1\217\1\220\1\221\1\222"+
    "\1\1\1\223\12\1\1\224\1\1\1\0\1\225\1\226"+
    "\6\0\1\227\1\230\5\0\2\1\1\231\1\1\2\232"+
    "\1\233\2\234\1\235\1\236\1\0\1\237\2\0\1\240"+
    "\1\241\4\0\1\242\1\0\1\243\1\244\1\0\1\245"+
    "\7\0\1\246\1\247\1\250\1\251\3\0\1\214\2\0"+
    "\1\252\2\0\1\246";

  private static int [] zzUnpackAction() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u01b6\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u01b6\0\u03b5"+
    "\0\u01b6\0\u03fe\0\u0447\0\u0490\0\u01b6\0\u04d9\0\u0522\0\u01b6"+
    "\0\u01b6\0\u056b\0\u05b4\0\u01b6\0\u05fd\0\u0646\0\u068f\0\u06d8"+
    "\0\u0721\0\u076a\0\u01b6\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7"+
    "\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f"+
    "\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u01b6\0\u0e42\0\u01b6"+
    "\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u01b6\0\u0faf\0\u0ff8\0\u1041"+
    "\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289"+
    "\0\u1289\0\u12d2\0\u01b6\0\u1289\0\u1289\0\u131b\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a"+
    "\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u183d\0\u01b6\0\u01b6\0\u01b6\0\u1886\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u18cf\0\u1918\0\u1961\0\u01b6\0\u19aa\0\u01b6"+
    "\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2"+
    "\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u01ff\0\u1ff0\0\u01ff"+
    "\0\u2039\0\u2082\0\u20cb\0\u2114\0\u01ff\0\u215d\0\u21a6\0\u21ef"+
    "\0\u2238\0\u2281\0\u22ca\0\u2313\0\u01ff\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636"+
    "\0\u267f\0\u01b6\0\u26c8\0\u2711\0\u01b6\0\u0df9\0\u01b6\0\u01b6"+
    "\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u01b6\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8"+
    "\0\u3031\0\u307a\0\u01b6\0\u01b6\0\u01b6\0\u30c3\0\u310c\0\u01ff"+
    "\0\u3155\0\u01ff\0\u319e\0\u31e7\0\u3230\0\u3279\0\u01ff\0\u32c2"+
    "\0\u330b\0\u01ff\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1"+
    "\0\u350a\0\u3553\0\u359c\0\u35e5\0\u01ff\0\u362e\0\u3677\0\u36c0"+
    "\0\u01ff\0\u3709\0\u3752\0\u379b\0\u01ff\0\u37e4\0\u382d\0\u3876"+
    "\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe"+
    "\0\u3b07\0\u3b50\0\u3b99\0\u01ff\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd"+
    "\0\u3d06\0\u3d4f\0\u01ff\0\u01b6\0\u3d98\0\u3de1\0\u01b6\0\u3e2a"+
    "\0\u28c7\0\u01b6\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0"+
    "\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228"+
    "\0\u4271\0\u42ba\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470"+
    "\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u466f\0\u46b8"+
    "\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900"+
    "\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u01ff\0\u4ab6\0\u4aff"+
    "\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u01ff\0\u4cb5\0\u4cfe"+
    "\0\u4d47\0\u4d90\0\u01b6\0\u4dd9\0\u4e22\0\u01b6\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u01ff\0\u5021\0\u506a\0\u50b3"+
    "\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u01b6\0\u52b2"+
    "\0\u01ff\0\u52fb\0\u01b6\0\u5344\0\u01b6\0\u538d\0\u53d6\0\u01b6"+
    "\0\u541f\0\u5468\0\u54b1\0\u01b6\0\u54fa\0\u5543\0\u558c\0\u55d5"+
    "\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u57d4\0\u581d"+
    "\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65"+
    "\0\u5aae\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad"+
    "\0\u5cf6\0\u01b6\0\u5d3f\0\u5d88\0\u5dd1\0\u5e1a\0\u5e63\0\u01b6"+
    "\0\u01ff\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u6019\0\u6062"+
    "\0\u01ff\0\u01b6\0\u60ab\0\u60f4\0\u613d\0\u01ff\0\u6186\0\u61cf"+
    "\0\u6218\0\u6261\0\u62aa\0\u62f3\0\u633c\0\u6385\0\u01b6\0\u63ce"+
    "\0\u6417\0\u6460\0\u64a9\0\u64f2\0\u653b\0\u6584\0\u01ff\0\u65cd"+
    "\0\u6616\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815"+
    "\0\u01b6\0\u685e\0\u01ff\0\u01b6\0\u01b6\0\u68a7\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u68f0\0\u6939\0\u6982\0\u69cb\0\u01b6\0\u6a14\0\u01b6"+
    "\0\u6a5d\0\u6aa6\0\u01b6\0\u6aef\0\u6b38\0\u01b6\0\u6b81\0\u6bca"+
    "\0\u6c13\0\u6c5c\0\u6ca5\0\u6cee\0\u6d37\0\u6d80\0\u6dc9\0\u01b6"+
    "\0\u01b6\0\u6e12\0\u6e5b\0\u6ea4\0\u01b6\0\u6eed\0\u6f36\0\u6f7f"+
    "\0\u6fc8\0\u01b6\0\u7011\0\u705a\0\u70a3\0\u70ec\0\u01ff\0\u01ff"+
    "\0\u01ff\0\u01ff\0\u7135\0\u717e\0\u71c7\0\u7210\0\u7259\0\u72a2"+
    "\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u72eb\0\u7334\0\u737d"+
    "\0\u73c6\0\u01ff\0\u740f\0\u7458\0\u74a1\0\u74ea\0\u01b6\0\u01ff"+
    "\0\u7533\0\u757c\0\u75c5\0\u760e\0\u7657\0\u01ff\0\u76a0\0\u01b6"+
    "\0\u76e9\0\u7732\0\u777b\0\u01b6\0\u01b6\0\u01b6\0\u77c4\0\u780d"+
    "\0\u7856\0\u789f\0\u01b6\0\u01b6\0\u78e8\0\u7931\0\u797a\0\u79c3"+
    "\0\u7a0c\0\u7a55\0\u7a9e\0\u7ae7\0\u7b30\0\u7b79\0\u01ff\0\u7bc2"+
    "\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u7c0b\0\u01ff"+
    "\0\u7c54\0\u7c9d\0\u7ce6\0\u7d2f\0\u7d78\0\u7dc1\0\u7e0a\0\u7e53"+
    "\0\u7e9c\0\u7ee5\0\u01ff\0\u7f2e\0\u7f77\0\u01b6\0\u01b6\0\u7fc0"+
    "\0\u8009\0\u8052\0\u809b\0\u80e4\0\u812d\0\u01b6\0\u01b6\0\u8176"+
    "\0\u81bf\0\u8208\0\u8251\0\u829a\0\u82e3\0\u832c\0\u01ff\0\u8375"+
    "\0\u01ff\0\u83be\0\u01ff\0\u01ff\0\u8407\0\u01ff\0\u01b6\0\u8450"+
    "\0\u01b6\0\u8499\0\u84e2\0\u01b6\0\u01b6\0\u852b\0\u8574\0\u85bd"+
    "\0\u8606\0\u01b6\0\u864f\0\u01ff\0\u01ff\0\u8698\0\u01b6\0\u86e1"+
    "\0\u872a\0\u8773\0\u87bc\0\u8805\0\u884e\0\u8897\0\u88e0\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u8929\0\u8972\0\u89bb\0\u01b6\0\u8a04\0\u8a4d"+
    "\0\u01b6\0\u8a96\0\u8adf\0\u01b6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\11\1\13\1\10\1\14"+
    "\2\10\1\15\1\7\1\11\1\16\1\7\1\17\1\20"+
    "\1\10\1\7\2\10\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\7\1\13\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\10\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\10\1\61"+
    "\1\10\1\62\1\63\1\10\1\64\4\10\1\65\1\66"+
    "\1\67\1\70\1\71\1\7\2\10\1\11\1\12\1\11"+
    "\1\13\1\10\1\14\2\10\1\15\1\7\1\11\1\16"+
    "\1\7\1\17\1\20\1\10\1\7\2\10\1\21\1\22"+
    "\1\23\1\72\1\25\1\26\1\7\1\13\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\10"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\10\1\61\1\10\1\62\1\63\1\10\1\64"+
    "\4\10\1\65\1\66\1\67\1\70\1\71\111\7\16\73"+
    "\1\74\1\75\1\76\70\73\3\77\1\100\1\101\104\77"+
    "\3\102\1\76\1\103\24\102\1\104\57\102\112\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\31\10\10\0\1\105\113\0\1\13\1\0\1\13"+
    "\1\0\1\106\6\0\1\107\1\110\2\0\1\106\7\0"+
    "\1\13\23\0\1\110\7\0\1\106\3\0\1\106\21\0"+
    "\1\13\1\0\1\13\1\111\1\106\6\0\1\107\1\110"+
    "\2\0\1\106\7\0\1\13\23\0\1\110\7\0\1\106"+
    "\3\0\1\106\1\111\25\0\1\112\3\0\1\113\110\0"+
    "\1\114\77\0\1\115\1\0\1\115\10\0\1\116\13\0"+
    "\1\115\10\0\1\117\42\0\3\120\2\0\11\120\1\121"+
    "\7\120\1\122\1\123\2\120\1\124\5\120\1\125\50\120"+
    "\26\23\1\126\1\23\1\127\60\23\16\0\1\130\132\0"+
    "\1\131\12\0\1\132\2\0\1\133\1\0\1\134\1\135"+
    "\3\0\1\136\2\0\1\137\1\140\72\0\1\141\1\142"+
    "\1\143\1\144\2\0\1\145\1\146\1\0\1\147\3\0"+
    "\1\150\1\0\1\151\1\0\1\152\1\153\31\0\1\154"+
    "\13\0\1\155\5\0\1\156\51\0\2\157\4\0\1\157"+
    "\1\0\2\157\7\0\1\157\1\0\2\157\25\0\31\157"+
    "\23\0\1\160\140\0\1\161\112\0\1\162\53\0\1\163"+
    "\32\0\1\164\1\0\1\165\61\0\1\166\135\0\1\167"+
    "\1\0\1\170\41\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\1\10\1\171\1\172"+
    "\11\10\1\173\1\174\4\10\1\175\6\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\6\10\1\176\22\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\177\1\200\3\10\1\201\1\10\1\202\6\10\1\203"+
    "\7\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\4\10\1\204\2\10\1\205"+
    "\16\10\1\206\1\207\1\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\7\10"+
    "\1\210\1\211\20\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\14\10\1\212"+
    "\5\10\1\213\1\214\5\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\6\10"+
    "\1\215\22\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\5\10\1\216\3\10"+
    "\1\217\12\10\1\220\4\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\1\221"+
    "\11\10\1\222\16\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\14\10\1\223"+
    "\2\10\1\224\4\10\1\225\4\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\7\10\1\226\2\10\1\227\13\10\1\230\2\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\3\10\1\231\4\10\1\232\20\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\1\233\3\10\1\234\3\10\1\235\20\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\1\236\30\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\1\237\21\10\1\240\6\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\1\241"+
    "\5\10\1\242\1\10\1\243\11\10\1\244\6\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\7\10\1\245\1\246\1\10\1\247\1\10"+
    "\1\250\1\10\1\251\12\10\23\0\1\252\73\0\2\253"+
    "\4\0\1\253\1\0\2\253\7\0\1\253\1\0\2\253"+
    "\25\0\31\253\23\0\1\130\13\0\1\254\56\0\16\73"+
    "\3\0\70\73\17\0\1\255\110\0\1\256\1\257\70\0"+
    "\3\77\2\0\104\77\3\0\1\100\105\0\3\102\2\0"+
    "\104\102\3\0\1\76\105\0\3\102\2\0\32\102\1\260"+
    "\51\102\12\0\1\106\12\0\1\106\43\0\1\106\3\0"+
    "\1\106\21\0\1\107\1\0\1\107\11\0\1\110\1\0"+
    "\2\261\7\0\1\107\23\0\1\110\13\0\1\261\1\0"+
    "\1\261\17\0\1\262\1\0\1\262\12\0\1\262\2\261"+
    "\7\0\1\262\13\0\1\262\23\0\1\261\1\0\1\261"+
    "\17\0\3\111\1\0\1\106\7\0\1\111\1\0\1\111"+
    "\1\106\7\0\1\111\15\0\2\111\4\0\1\111\6\0"+
    "\1\111\1\106\2\0\1\111\1\106\1\0\1\111\11\0"+
    "\3\263\2\0\6\263\1\264\75\263\17\113\1\265\71\113"+
    "\17\0\1\266\77\0\1\115\1\0\1\115\11\0\1\110"+
    "\1\0\2\261\7\0\1\115\23\0\1\110\13\0\1\261"+
    "\1\0\1\261\32\0\1\267\137\0\1\270\40\0\3\120"+
    "\2\0\21\120\1\122\1\123\64\120\2\0\104\120\111\23"+
    "\55\0\1\271\134\0\1\272\71\0\1\273\110\0\1\274"+
    "\4\0\1\275\5\0\1\276\102\0\1\277\7\0\1\300"+
    "\72\0\1\301\116\0\1\302\103\0\1\303\110\0\1\304"+
    "\127\0\1\305\70\0\1\306\7\0\1\307\115\0\1\310"+
    "\1\311\64\0\1\312\5\0\1\313\123\0\1\314\75\0"+
    "\1\315\106\0\1\316\114\0\1\317\102\0\1\320\7\0"+
    "\1\321\2\0\1\150\21\0\2\157\3\0\5\157\7\0"+
    "\1\157\1\0\2\157\7\0\1\157\15\0\31\157\54\0"+
    "\1\322\111\0\1\323\110\0\1\324\110\0\1\325\41\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\2\10\1\326\26\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\2\10\1\327\26\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\15\10\1\330"+
    "\13\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\15\10\1\331\13\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\22\10\1\332\6\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\20\10\1\333\10\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\1\334\30\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\17\10\1\335\11\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\7\10\1\336\21\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\24\10"+
    "\1\337\4\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\1\340\30\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\5\10\1\341\23\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\4\10\1\342\24\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\6\10\1\343"+
    "\22\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\12\10\1\344\16\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\1\345\5\10\1\346\1\10\1\347\1\350"+
    "\1\351\6\10\1\352\2\10\1\353\4\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\2\10\1\354\26\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\15\10"+
    "\1\355\13\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\2\10\1\356\26\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\3\10\1\357\10\10\1\332\4\10"+
    "\1\360\7\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\21\10\1\361\2\10"+
    "\1\362\1\363\3\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\6\10\1\364"+
    "\22\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\7\10\1\365\12\10\1\366"+
    "\6\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\6\10\1\367\22\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\24\10\1\370\4\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\5\10\1\371\23\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\3\10\1\332"+
    "\25\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\3\10\1\372\25\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\6\10\1\373\3\10\1\374\16\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\17\10\1\332\11\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\14\10\1\375\14\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\3\10\1\376"+
    "\25\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\14\10\1\377\14\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\21\10\1\u0100\7\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\2\10\1\u0101\26\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\1\u0102\30\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\17\10\1\u0103\11\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\3\10\1\u0104\25\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\21\10"+
    "\1\u0105\7\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\1\u0106\30\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\6\10\1\u0107\22\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\7\10\1\u0108\12\10\1\u0109\6\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\23\10\1\u010a\5\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\23\10\1\u010b"+
    "\5\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\14\10\1\u010b\14\10\6\0"+
    "\2\253\3\0\5\253\7\0\1\253\1\0\2\253\7\0"+
    "\1\253\15\0\31\253\40\0\1\u010c\1\u010d\1\0\1\u010d"+
    "\76\0\2\261\47\0\1\261\1\0\1\261\17\0\1\262"+
    "\1\0\1\262\13\0\2\261\7\0\1\262\37\0\1\261"+
    "\1\0\1\261\11\0\3\263\2\0\107\263\2\0\6\263"+
    "\1\u010e\75\263\13\113\1\u010f\3\113\1\u0110\71\113\17\0"+
    "\1\u0111\1\u010f\111\0\1\u0112\144\0\1\u0113\114\0\1\u0114"+
    "\114\0\1\u0115\105\0\1\u0116\116\0\1\u0117\75\0\1\u0118"+
    "\7\0\1\u0119\117\0\1\u011a\103\0\1\u011b\1\u011c\117\0"+
    "\1\u011d\101\0\1\u011e\102\0\1\u011f\107\0\1\u0120\112\0"+
    "\1\u0121\117\0\1\u0122\76\0\1\u0123\106\0\1\u0124\131\0"+
    "\1\u0125\76\0\1\u0126\117\0\1\u0127\77\0\1\u0128\122\0"+
    "\1\u0129\110\0\1\u012a\1\0\1\u012b\100\0\1\u012c\77\0"+
    "\1\u012d\107\0\1\320\103\0\1\u012e\41\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\3\10\1\u012f\1\10\1\u0130\3\10\1\u0131\17\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\16\10\1\u0132\12\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\7\10\1\u0133\21\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\12\10\1\u0134"+
    "\16\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\3\10\1\u0135\11\10\1\u0136"+
    "\3\10\1\u0137\1\u0138\6\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\6\10"+
    "\1\u0139\3\10\1\u013a\16\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\u013b\25\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\2\10\1\u013c\26\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u013d\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\14\10\1\u013e\14\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\14\10"+
    "\1\u013f\14\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\23\10\1\u0140\5\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\24\10\1\u0141\4\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\5\10\1\u0142\23\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\1\u0143"+
    "\30\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\17\10\1\u0144\11\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\1\u0145\30\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\14\10"+
    "\1\u010b\1\10\1\251\12\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\346\25\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\6\10\1\u0146\22\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\4\10\1\u0147\1\10\1\u0148\2\10"+
    "\1\u0149\17\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\6\10\1\u014a\22\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\3\0\1\u014b\11\0\31\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\16\10\1\u014c\12\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\7\10"+
    "\1\u014d\21\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\u014e\2\10\7\0\1\10\13\0\1\u014e\1\0\31\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\13\10\1\u014f\15\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\12\10\1\u0150\16\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\10\10"+
    "\1\u0151\11\10\1\u0152\6\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\26\10"+
    "\1\u0153\2\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\7\10\1\u0154\4\10"+
    "\1\u0155\14\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\22\10\1\u0156\6\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\24\10\1\u0157\4\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\1\u0158\30\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\22\10\1\u0159"+
    "\6\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\7\10\1\u015a\5\10\1\u015b"+
    "\13\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\3\10\1\u015c\2\10\1\u015d"+
    "\22\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\2\10\1\u015e\26\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\3\0\1\u015f\11\0\31\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\1\u0160\30\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\17\10\1\u0161\11\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u0162\22\10\6\0\2\10"+
    "\3\0\5\10\4\0\1\u0163\2\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\31\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\15\10"+
    "\1\u0164\13\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\3\0\1\u0165\11\0\31\10"+
    "\42\0\1\u010c\53\0\3\u010e\2\u0166\7\u010e\2\263\73\u010e"+
    "\17\113\1\u0110\71\113\61\0\1\u0167\116\0\1\u0168\110\0"+
    "\1\u0169\104\0\1\u016a\112\0\1\u016b\104\0\1\u016c\126\0"+
    "\1\u016d\106\0\1\u016e\103\0\1\u016f\101\0\1\u0170\114\0"+
    "\1\u0171\104\0\1\u0172\107\0\1\u0173\103\0\1\u0174\123\0"+
    "\1\u0175\102\0\1\u0176\32\0\1\u0177\72\0\1\u0178\72\0"+
    "\1\u0179\1\0\1\u017a\2\0\1\u017b\5\0\1\u017c\4\0"+
    "\1\u017d\2\0\1\u017e\100\0\1\u017f\73\0\1\u0180\35\0"+
    "\1\u0181\60\0\1\u0182\105\0\1\u0183\103\0\1\u0184\120\0"+
    "\1\u0185\112\0\1\u0186\3\0\1\u0187\75\0\1\u0188\34\0"+
    "\1\u0189\156\0\1\u018a\41\0\2\10\3\0\2\10\1\u018b"+
    "\2\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\4\10\1\u018c\24\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\7\10\1\u018d"+
    "\21\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\3\10\1\u012f\6\10\1\u018e"+
    "\16\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\17\10\1\u018f\11\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\3\0\1\u0190\11\0\31\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\14\10\1\u0191\14\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\12\10\1\u0192"+
    "\16\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\6\10\1\u0193\22\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\2\10\1\u0194\26\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\10\10\1\u0195\20\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\22\10\1\u0196"+
    "\6\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\14\10\1\u0197\14\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\15\10\1\u0198\13\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\6\10\1\u0199\22\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\u019a\2\10\7\0\1\10\13\0\1\u019a\1\0"+
    "\15\10\1\u019b\13\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\15\10\1\u019c"+
    "\13\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\12\10\1\u010b\16\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\12\10\1\u019d\16\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\15\10\1\u019b\13\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\7\10\1\365"+
    "\12\10\1\u019e\6\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\5\10\1\u019f"+
    "\23\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\2\10\1\u01a0\26\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\5\10\1\u01a1\23\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\7\10\1\u01a2\21\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\1\u01a3\30\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\5\10\1\u01a4\23\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\12\10\1\u01a5\16\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\22\10"+
    "\1\u01a6\6\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\3\0\1\u01a7\11\0\3\10"+
    "\1\u01a8\11\10\1\u019b\13\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\23\10"+
    "\1\u01a9\5\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\7\10\1\u01aa\21\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u01ab\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\3\10\1\u01ac\1\10\1\u01ad\3\10\1\u01ae\17\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u01af\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\6\10\1\u01b0\22\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\12\10"+
    "\1\u01b1\16\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\2\10\1\u01b2\1\u01b3"+
    "\1\10\1\u01b4\3\10\1\u01b5\17\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\10\10\1\u01b6\20\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\10\10\1\u01b7"+
    "\20\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\6\10\1\u01b8\22\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\24\10\1\251\4\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\u01b9\2\10\7\0\1\10\13\0"+
    "\1\u01b9\1\0\31\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\2\10\1\u01ba"+
    "\26\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\22\10\1\u01bb\6\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\3\0\1\u01bc\11\0\31\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\3\0"+
    "\1\u01bd\11\0\31\10\5\0\14\u0166\2\0\73\u0166\62\0"+
    "\1\u01be\104\0\1\u01bf\114\0\1\u01c0\125\0\1\u01c1\100\0"+
    "\1\u01c2\1\u01c3\111\0\1\u01c4\100\0\1\u01c5\126\0\1\u01c6"+
    "\100\0\1\u01c7\120\0\1\u01c8\66\0\1\u01c9\1\u01ca\134\0"+
    "\1\u01cb\64\0\1\u01cc\113\0\1\u01cd\105\0\1\u01ce\5\0"+
    "\1\u01cf\105\0\1\u01d0\107\0\1\u01d1\112\0\1\u01d2\101\0"+
    "\1\u01d3\131\0\1\u01d4\110\0\1\u01d5\101\0\1\u01d6\76\0"+
    "\1\u01d7\116\0\1\u01d8\105\0\1\u01d9\5\0\1\u01da\106\0"+
    "\1\u01db\105\0\1\u01dc\110\0\1\u01dd\125\0\1\u01de\111\0"+
    "\1\u01df\102\0\1\u01e0\106\0\1\u01e1\101\0\1\u01e2\5\0"+
    "\1\u01e3\25\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\4\10\1\u018c\24\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\5\10\1\u01e4\23\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\10\10\1\u01e5\20\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\6\10\1\u01e6"+
    "\22\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\6\10\1\u01e7\22\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\21\10\1\u01e8\7\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\24\10\1\u01e9\4\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\3\10\1\u01ea"+
    "\25\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\1\u01eb\30\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\12\10\1\u01ec\16\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\u01ed\25\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\6\10\1\u01ee\22\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u01ef\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\6\10\1\u01f0\22\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\23\10"+
    "\1\u01f1\5\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\22\10\1\u0152\6\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u01f2\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\6\10\1\u01f3\22\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\14\10"+
    "\1\u01f4\14\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\7\10\1\u01f5\21\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\3\10\1\u01f6\25\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\7\10\1\u01f7\21\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\10\10"+
    "\1\u01f8\20\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\4\10\1\u01f9\24\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\7\10\1\u01f1\12\10\1\u01f1\6\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\3\10\1\u01fa\25\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\17\10\1\u01fb\11\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\4\10"+
    "\1\u01fc\24\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\7\10\1\u01fd\21\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\12\10\1\u01fe\16\10\6\0\2\10"+
    "\3\0\5\10\4\0\1\u01ff\2\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\31\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\23\10"+
    "\1\u0200\5\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\10\10\1\u0201\20\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\4\10\1\u0202\24\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\7\10\1\u0203\21\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\u01b3\6\10\1\u0204\16\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\1\u0205"+
    "\30\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\15\10\1\u015b\13\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\24\10\1\u0206\4\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\15\10\1\u0207\13\10\63\0\1\u0208\122\0\1\u0209\101\0"+
    "\1\u020a\117\0\1\u020b\117\0\1\u020c\72\0\1\u020d\132\0"+
    "\1\u020e\67\0\1\u020f\105\0\1\u0210\120\0\1\u0211\77\0"+
    "\1\u01ce\34\0\1\u0177\167\0\1\u0212\116\0\1\u0213\116\0"+
    "\1\u0214\66\0\1\u0215\110\0\1\u0216\124\0\1\u0217\76\0"+
    "\1\u0218\111\0\1\u01d9\122\0\1\u0219\101\0\1\u021a\102\0"+
    "\1\u021b\116\0\1\u021c\123\0\1\u021d\103\0\1\u021e\77\0"+
    "\1\u01e2\33\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\6\10\1\u021f\22\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\5\10\1\u021f\23\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\13\10\1\u0220\15\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\15\10\1\u0221"+
    "\13\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\17\10\1\u0222\11\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\7\10\1\u0223\21\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\24\10\1\u0224\4\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\24\10\1\u0225"+
    "\4\10\6\0\2\10\3\0\5\10\7\0\1\10\1\0"+
    "\2\10\7\0\1\10\15\0\24\10\1\u0226\4\10\6\0"+
    "\2\10\3\0\5\10\7\0\1\10\1\0\2\10\7\0"+
    "\1\10\15\0\12\10\1\u0227\16\10\6\0\2\10\3\0"+
    "\5\10\7\0\1\10\1\0\2\10\7\0\1\10\15\0"+
    "\6\10\1\u0228\22\10\6\0\2\10\3\0\5\10\7\0"+
    "\1\10\1\0\2\10\7\0\1\10\15\0\1\u0229\30\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\5\10\1\u022a\23\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\6\10\1\u022b\22\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\5\10"+
    "\1\u022c\23\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\10\10\1\u022d\20\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u022e\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\7\10\1\u022f\21\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\5\10"+
    "\1\u0230\23\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\10\10\1\u0231\20\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\6\10\1\u0232\22\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\15\10\1\u0233\13\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\6\10"+
    "\1\u0234\22\10\66\0\1\u0235\126\0\1\u0236\72\0\1\u0237"+
    "\104\0\1\u0238\113\0\1\u0239\114\0\1\u023a\26\0\1\u023b"+
    "\203\0\1\u023c\110\0\1\u023d\103\0\1\u023e\122\0\1\u023f"+
    "\10\0\1\u0181\175\0\1\u0240\77\0\1\u0241\121\0\1\u0242"+
    "\77\0\1\u0243\123\0\1\u0244\20\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\u0245\25\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\10\10\1\u0246\20\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\15\10\1\u0247\13\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\6\10\1\u0142\22\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\14\10"+
    "\1\u0248\14\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\6\10\1\u0249\22\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\5\10\1\u0249\23\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\13\10\1\u024a\15\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\3\10"+
    "\1\u024b\25\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\6\10\1\u024c\22\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\5\10\1\u024c\23\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\13\10\1\u024d\15\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\21\10"+
    "\1\u024e\7\10\104\0\1\u024f\76\0\1\u0250\104\0\1\u0251"+
    "\110\0\1\u0252\104\0\1\u0253\130\0\1\u0254\110\0\1\u0255"+
    "\77\0\1\u0256\111\0\1\u0257\76\0\1\u0258\122\0\1\u0259"+
    "\104\0\1\u025a\30\0\2\10\3\0\2\10\1\u018b\2\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\3\0\1\u025b"+
    "\11\0\4\10\1\u018c\24\10\6\0\2\10\3\0\5\10"+
    "\7\0\1\10\1\0\2\10\7\0\1\10\15\0\14\10"+
    "\1\u025c\14\10\6\0\2\10\3\0\5\10\7\0\1\10"+
    "\1\0\2\10\7\0\1\10\15\0\3\10\1\u025d\25\10"+
    "\6\0\2\10\3\0\5\10\7\0\1\10\1\0\2\10"+
    "\7\0\1\10\15\0\3\10\1\u01ac\25\10\6\0\2\10"+
    "\3\0\5\10\7\0\1\10\1\0\2\10\7\0\1\10"+
    "\15\0\3\10\1\u01b3\25\10\110\0\1\u025e\67\0\1\u025f"+
    "\104\0\1\u0260\34\0\1\u0261\171\0\1\u0262\117\0\1\u0263"+
    "\101\0\1\u0264\104\0\1\u0265\112\0\1\u020e\111\0\1\u0266"+
    "\112\0\1\u0267\113\0\1\u0268\102\0\1\u0269\116\0\1\u026a"+
    "\101\0\1\u026b\121\0\1\u026c\75\0\1\u026d\113\0\1\u026e"+
    "\123\0\1\u026f\32\0\1\u0270\150\0\1\u0271\116\0\1\u0272"+
    "\102\0\1\u0273\52\0\1\u0274\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\5\1\1\11\1\1\1\11"+
    "\3\1\1\11\2\1\2\11\2\1\1\11\6\1\1\11"+
    "\22\1\3\11\5\1\1\11\1\1\1\11\4\1\1\11"+
    "\15\1\1\11\3\1\3\11\22\0\3\11\1\1\3\11"+
    "\1\0\2\1\1\11\1\1\1\11\61\1\1\11\2\1"+
    "\1\11\1\0\2\11\4\1\1\0\1\1\1\11\10\0"+
    "\1\1\22\0\3\11\66\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\11\20\0\1\1\3\0\1\1\5\0\36\1"+
    "\1\11\2\1\1\11\20\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\3\0\1\11\1\1\34\0"+
    "\1\11\5\1\1\11\11\1\1\11\14\1\1\11\21\1"+
    "\1\11\2\1\2\11\1\0\3\11\4\0\1\11\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\0\1\1\7\0"+
    "\2\11\3\0\1\11\4\0\1\11\1\0\33\1\1\11"+
    "\10\1\1\11\3\0\3\11\3\0\1\1\2\11\4\0"+
    "\1\1\5\0\26\1\1\0\2\11\6\0\2\11\5\0"+
    "\12\1\1\11\1\0\1\11\2\0\2\11\4\0\1\11"+
    "\1\0\2\1\1\0\1\11\7\0\1\1\3\11\3\0"+
    "\1\11\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int openCommentCount;
    private IElementType nestingCommentType;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case NESTING_COMMENT: {
              openCommentCount = 0;
                              yybegin(YYINITIAL);
                              return nestingCommentType;
            }
            case 629: break;
            case EXTCODE_FIRST: {
              yybegin(YYINITIAL); return ATSTokenTypes.EXTCODE;
            }
            case 630: break;
            case EXTCODE_REST: {
              yybegin(YYINITIAL); return ATSTokenTypes.EXTCODE;
            }
            case 631: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ATSTokenTypes.IDENTIFIER;
            }
          case 171: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 172: break;
          case 3: 
            { return ATSTokenTypes.INT;
            }
          case 173: break;
          case 4: 
            { return ATSTokenTypes.LPAREN;
            }
          case 174: break;
          case 5: 
            { return ATSTokenTypes.RPAREN;
            }
          case 175: break;
          case 6: 
            { return ATSTokenTypes.DOT;
            }
          case 176: break;
          case 7: 
            { return ATSTokenTypes.BACKSLASH;
            }
          case 177: break;
          case 8: 
            { return ATSTokenTypes.CHAR;
            }
          case 178: break;
          case 9: 
            { return ATSTokenTypes.STRING;
            }
          case 179: break;
          case 10: 
            { return ATSTokenTypes.PERCENT;
            }
          case 180: break;
          case 11: 
            { return ATSTokenTypes.LBRACE;
            }
          case 181: break;
          case 12: 
            { return ATSTokenTypes.HASH;
            }
          case 182: break;
          case 13: 
            { return ATSTokenTypes.DOLLAR;
            }
          case 183: break;
          case 14: 
            { return ATSTokenTypes.RBRACE;
            }
          case 184: break;
          case 15: 
            { return ATSTokenTypes.LBRACKET;
            }
          case 185: break;
          case 16: 
            { return ATSTokenTypes.AT;
            }
          case 186: break;
          case 17: 
            { return ATSTokenTypes.BANG;
            }
          case 187: break;
          case 18: 
            { return ATSTokenTypes.BAR;
            }
          case 188: break;
          case 19: 
            { return ATSTokenTypes.BQUOTE;
            }
          case 189: break;
          case 20: 
            { return ATSTokenTypes.COLON;
            }
          case 190: break;
          case 21: 
            { return ATSTokenTypes.LT;
            }
          case 191: break;
          case 22: 
            { return ATSTokenTypes.EQ;
            }
          case 192: break;
          case 23: 
            { return ATSTokenTypes.GT;
            }
          case 193: break;
          case 24: 
            { return ATSTokenTypes.TILDE;
            }
          case 194: break;
          case 25: 
            { return ATSTokenTypes.COMMA;
            }
          case 195: break;
          case 26: 
            { return ATSTokenTypes.SEMICOLON;
            }
          case 196: break;
          case 27: 
            { return ATSTokenTypes.RBRACKET;
            }
          case 197: break;
          case 28: 
            { return ATSTokenTypes.QMARK;
            }
          case 198: break;
          case 29: 
            { 
            }
          case 199: break;
          case 30: 
            { yybegin(EXTCODE_REST);
            }
          case 200: break;
          case 31: 
            { return ATSTokenTypes.CRLF;
            }
          case 201: break;
          case 32: 
            { return ATSTokenTypes.FLOAT;
            }
          case 202: break;
          case 33: 
            { return ATSTokenTypes.COMMENT_LINE;
            }
          case 203: break;
          case 34: 
            { return ATSTokenTypes.COMMENT_BLOCK;
            }
          case 204: break;
          case 35: 
            { openCommentCount = 1; nestingCommentType = ATSTokenTypes.COMMENT_BLOCK; yybegin(NESTING_COMMENT);
            }
          case 205: break;
          case 36: 
            { return ATSTokenTypes.DOTINT;
            }
          case 206: break;
          case 37: 
            { return ATSTokenTypes.DOTDOT;
            }
          case 207: break;
          case 38: 
            { return ATSTokenTypes.DOTLT;
            }
          case 208: break;
          case 39: 
            { return ATSTokenTypes.QUOTELPAREN;
            }
          case 209: break;
          case 40: 
            { return ATSTokenTypes.QUOTELBRACE;
            }
          case 210: break;
          case 41: 
            { return ATSTokenTypes.QUOTELBRACKET;
            }
          case 211: break;
          case 42: 
            { return ATSTokenTypes.PERCENTLPAREN;
            }
          case 212: break;
          case 43: 
            { return ATSTokenTypes.HASHLBRACKETOLON;
            }
          case 213: break;
          case 44: 
            { return ATSTokenTypes.ATLPAREN;
            }
          case 214: break;
          case 45: 
            { return ATSTokenTypes.ATLBRACE;
            }
          case 215: break;
          case 46: 
            { return ATSTokenTypes.ATLBRACKET;
            }
          case 216: break;
          case 47: 
            { return ATSTokenTypes.VAL_IDENTIFIER;
            }
          case 217: break;
          case 48: 
            { return ATSTokenTypes.BQUOTELPAREN;
            }
          case 218: break;
          case 49: 
            { return ATSTokenTypes.COLONLT;
            }
          case 219: break;
          case 50: 
            { return ATSTokenTypes.GTLT;
            }
          case 220: break;
          case 51: 
            { return ATSTokenTypes.EQLT;
            }
          case 221: break;
          case 52: 
            { return ATSTokenTypes.EQGT;
            }
          case 222: break;
          case 53: 
            { return ATSTokenTypes.GTDOT;
            }
          case 223: break;
          case 54: 
            { return ATSTokenTypes.MINUSLT;
            }
          case 224: break;
          case 55: 
            { return ATSTokenTypes.MINUSGT;
            }
          case 225: break;
          case 56: 
            { return ATSTokenTypes.AS;
            }
          case 226: break;
          case 57: 
            { return ATSTokenTypes.OP;
            }
          case 227: break;
          case 58: 
            { return ATSTokenTypes.OF;
            }
          case 228: break;
          case 59: 
            { return ATSTokenTypes.IN;
            }
          case 229: break;
          case 60: 
            { return ATSTokenTypes.IF;
            }
          case 230: break;
          case 61: 
            { return ATSTokenTypes.DO;
            }
          case 231: break;
          case 62: 
            { return ATSTokenTypes.FUN;
            }
          case 232: break;
          case 63: 
            { return ATSTokenTypes.COMMALPAREN;
            }
          case 233: break;
          case 64: 
            { return ATSTokenTypes.REF_IDENTIFIER;
            }
          case 234: break;
          case 65: 
            { yybegin(EXTCODE_FIRST);
            }
          case 235: break;
          case 66: 
            { openCommentCount += 1;
            }
          case 236: break;
          case 67: 
            { openCommentCount -= 1;
                              if (openCommentCount == 0) {
                                yybegin(YYINITIAL);
                                return nestingCommentType;
                              }
            }
          case 237: break;
          case 68: 
            { yybegin(YYINITIAL); return ATSTokenTypes.EXTCODE;
            }
          case 238: break;
          case 69: 
            { openCommentCount = 1; nestingCommentType = ATSTokenTypes.COMMENT_DOC; yybegin(NESTING_COMMENT);
            }
          case 239: break;
          case 70: 
            { return ATSTokenTypes.DOTDOTDOT;
            }
          case 240: break;
          case 71: 
            { return ATSTokenTypes.SRPIF;
            }
          case 241: break;
          case 72: 
            { return ATSTokenTypes.EQLTGT;
            }
          case 242: break;
          case 73: 
            { return ATSTokenTypes.EQGTGT;
            }
          case 243: break;
          case 74: 
            { return ATSTokenTypes.MINUSLTGT;
            }
          case 244: break;
          case 75: 
            { return ATSTokenTypes.AND;
            }
          case 245: break;
          case 76: 
            { return ATSTokenTypes.DLREFFMASK_ARG;
            }
          case 246: break;
          case 77: 
            { return ATSTokenTypes.SIF;
            }
          case 247: break;
          case 78: 
            { return ATSTokenTypes.TRY;
            }
          case 248: break;
          case 79: 
            { return ATSTokenTypes.END;
            }
          case 249: break;
          case 80: 
            { return ATSTokenTypes.REC;
            }
          case 250: break;
          case 81: 
            { return ATSTokenTypes.VAR;
            }
          case 251: break;
          case 82: 
            { return ATSTokenTypes.VAL;
            }
          case 252: break;
          case 83: 
            { return ATSTokenTypes.LAM;
            }
          case 253: break;
          case 84: 
            { return ATSTokenTypes.LET;
            }
          case 254: break;
          case 85: 
            { return ATSTokenTypes.FIX;
            }
          case 255: break;
          case 86: 
            { return ATSTokenTypes.DOTLTGTDOT;
            }
          case 256: break;
          case 87: 
            { return ATSTokenTypes.DLRTUP;
            }
          case 257: break;
          case 88: 
            { return ATSTokenTypes.DLRREC;
            }
          case 258: break;
          case 89: 
            { return ATSTokenTypes.DLRLST;
            }
          case 259: break;
          case 90: 
            { return ATSTokenTypes.EQSLASHEQGT;
            }
          case 260: break;
          case 91: 
            { return ATSTokenTypes.TYPE;
            }
          case 261: break;
          case 92: 
            { return ATSTokenTypes.THEN;
            }
          case 262: break;
          case 93: 
            { return ATSTokenTypes.ELSE;
            }
          case 263: break;
          case 94: 
            { return ATSTokenTypes.REFAT;
            }
          case 264: break;
          case 95: 
            { return ATSTokenTypes.WITH;
            }
          case 265: break;
          case 96: 
            { return ATSTokenTypes.WHEN;
            }
          case 266: break;
          case 97: 
            { return ATSTokenTypes.CASE;
            }
          case 267: break;
          case 98: 
            { return ATSTokenTypes.FORSTAR;
            }
          case 268: break;
          case 99: 
            { return ATSTokenTypes.COMMENT_REST;
            }
          case 269: break;
          case 100: 
            { return ATSTokenTypes.SRPTHEN;
            }
          case 270: break;
          case 101: 
            { return ATSTokenTypes.SRPELSE;
            }
          case 271: break;
          case 102: 
            { return ATSTokenTypes.SRPELIF;
            }
          case 272: break;
          case 103: 
            { return ATSTokenTypes.EQSLASHEQGTGT;
            }
          case 273: break;
          case 104: 
            { return ATSTokenTypes.ADDRAT;
            }
          case 274: break;
          case 105: 
            { return ATSTokenTypes.BEGIN;
            }
          case 275: break;
          case 106: 
            { return ATSTokenTypes.SCASE;
            }
          case 276: break;
          case 107: 
            { return ATSTokenTypes.VIEWAT;
            }
          case 277: break;
          case 108: 
            { return ATSTokenTypes.FIXITY;
            }
          case 278: break;
          case 109: 
            { return ATSTokenTypes.WHERE;
            }
          case 279: break;
          case 110: 
            { return ATSTokenTypes.WHILE;
            }
          case 280: break;
          case 111: 
            { return ATSTokenTypes.LOCAL;
            }
          case 281: break;
          case 112: 
            { return ATSTokenTypes.FREEAT;
            }
          case 282: break;
          case 113: 
            { return ATSTokenTypes.FOLDAT;
            }
          case 283: break;
          case 114: 
            { return ATSTokenTypes.SRPPRINT;
            }
          case 284: break;
          case 115: 
            { return ATSTokenTypes.SRPERROR;
            }
          case 285: break;
          case 116: 
            { return ATSTokenTypes.SRPENDIF;
            }
          case 286: break;
          case 117: 
            { return ATSTokenTypes.SRPIFDEF;
            }
          case 287: break;
          case 118: 
            { return ATSTokenTypes.SRPUNDEF;
            }
          case 288: break;
          case 119: 
            { return ATSTokenTypes.DLRBREAK;
            }
          case 289: break;
          case 120: 
            { return ATSTokenTypes.DLRRAISE;
            }
          case 290: break;
          case 121: 
            { return ATSTokenTypes.DLRDELAY;
            }
          case 291: break;
          case 122: 
            { return ATSTokenTypes.ASSUME;
            }
          case 292: break;
          case 123: 
            { return ATSTokenTypes.STATIC;
            }
          case 293: break;
          case 124: 
            { return ATSTokenTypes.STADEF;
            }
          case 294: break;
          case 125: 
            { return ATSTokenTypes.STACST;
            }
          case 295: break;
          case 126: 
            { return ATSTokenTypes.EXTYPE;
            }
          case 296: break;
          case 127: 
            { return ATSTokenTypes.EXTERN;
            }
          case 297: break;
          case 128: 
            { return ATSTokenTypes.EXTVAR;
            }
          case 298: break;
          case 129: 
            { return ATSTokenTypes.IMPORT;
            }
          case 299: break;
          case 130: 
            { return ATSTokenTypes.WHILESTAR;
            }
          case 300: break;
          case 131: 
            { return ATSTokenTypes.NONFIX;
            }
          case 301: break;
          case 132: 
            { return ATSTokenTypes.MACDEF;
            }
          case 302: break;
          case 133: 
            { return ATSTokenTypes.SRPASSERT;
            }
          case 303: break;
          case 134: 
            { return ATSTokenTypes.SRPIFNDEF;
            }
          case 304: break;
          case 135: 
            { return ATSTokenTypes.SRPDEFINE;
            }
          case 305: break;
          case 136: 
            { return ATSTokenTypes.DLRARRPSZ;
            }
          case 306: break;
          case 137: 
            { return ATSTokenTypes.DLREXTYPE;
            }
          case 307: break;
          case 138: 
            { return ATSTokenTypes.DLREXTERN;
            }
          case 308: break;
          case 139: 
            { return ATSTokenTypes.DLREXTVAL;
            }
          case 309: break;
          case 140: 
            { return ATSTokenTypes.ABSTYPE;
            }
          case 310: break;
          case 141: 
            { return ATSTokenTypes.SRPSTALOAD;
            }
          case 311: break;
          case 142: 
            { return ATSTokenTypes.SYMELIM;
            }
          case 312: break;
          case 143: 
            { return ATSTokenTypes.SYMINTR;
            }
          case 313: break;
          case 144: 
            { return ATSTokenTypes.SORTDEF;
            }
          case 314: break;
          case 145: 
            { return ATSTokenTypes.TYPEDEF;
            }
          case 315: break;
          case 146: 
            { return ATSTokenTypes.TKINDEF;
            }
          case 316: break;
          case 147: 
            { return ATSTokenTypes.REQUIRE;
            }
          case 317: break;
          case 148: 
            { return ATSTokenTypes.SRPDYNLOAD;
            }
          case 318: break;
          case 149: 
            { return ATSTokenTypes.SRPELIFDEF;
            }
          case 319: break;
          case 150: 
            { return ATSTokenTypes.SRPINCLUDE;
            }
          case 320: break;
          case 151: 
            { return ATSTokenTypes.DLREXTKIND;
            }
          case 321: break;
          case 152: 
            { return ATSTokenTypes.DLREFFMASK;
            }
          case 322: break;
          case 153: 
            { return ATSTokenTypes.OVERLOAD;
            }
          case 323: break;
          case 154: 
            { return ATSTokenTypes.WITHTYPE;
            }
          case 324: break;
          case 155: 
            { return ATSTokenTypes.DATASORT;
            }
          case 325: break;
          case 156: 
            { return ATSTokenTypes.DATATYPE;
            }
          case 326: break;
          case 157: 
            { return ATSTokenTypes.CLASSDEC;
            }
          case 327: break;
          case 158: 
            { return ATSTokenTypes.SRPELIFNDEF;
            }
          case 328: break;
          case 159: 
            { return ATSTokenTypes.DLRSHOWTYPE;
            }
          case 329: break;
          case 160: 
            { return ATSTokenTypes.DLREXTMCALL;
            }
          case 330: break;
          case 161: 
            { return ATSTokenTypes.DLREXTFCALL;
            }
          case 331: break;
          case 162: 
            { return ATSTokenTypes.DLRCONTINUE;
            }
          case 332: break;
          case 163: 
            { return ATSTokenTypes.EXCEPTION;
            }
          case 333: break;
          case 164: 
            { return ATSTokenTypes.IMPLEMENT;
            }
          case 334: break;
          case 165: 
            { return ATSTokenTypes.DLRTEMPENVER;
            }
          case 335: break;
          case 166: 
            { return ATSTokenTypes.DLRVCOPYENV;
            }
          case 336: break;
          case 167: 
            { return ATSTokenTypes.DLRMYLOCATION;
            }
          case 337: break;
          case 168: 
            { return ATSTokenTypes.DLRMYFILENAME;
            }
          case 338: break;
          case 169: 
            { return ATSTokenTypes.DLRMYFUNCTION;
            }
          case 339: break;
          case 170: 
            { return ATSTokenTypes.DLREXTYPE_STRUCT;
            }
          case 340: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
