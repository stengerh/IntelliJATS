/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
//TODO: static import this
import com.atslangplugin.psi.ATSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Holger_2/Documents/Projects/IntelliJATS/src/main/grammar/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 2;
  public static final int PRAGMA = 4;
  public static final int DEFINE = 6;
  public static final int DEFINE_CONTINUATION = 8;
  public static final int CONTINUATION = 10;
  public static final int BLOCK_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\25\1\30\4\13\1\30\1"+
    "\136\1\137\1\16\1\13\1\16\1\13\1\16\1\137\1\67\3\13\1\140\1\1\1\141\4\1\5"+
    "\13\1\27\2\13\1\142\4\13\1\40\1\13\1\143\3\1\1\13\1\144\1\47\2\13\1\145\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\146\5\1\1\104\2\13\1\140\1\147\3\1"+
    "\1\150\1\13\1\151\1\42\2\13\1\40\1\1\2\13\1\140\1\1\1\37\1\42\1\13\1\144\6"+
    "\1\1\152\1\153\14\13\4\1\21\13\1\134\2\13\1\134\1\154\1\13\1\144\3\13\1\155"+
    "\1\156\1\157\1\120\1\156\2\1\1\160\4\1\1\161\1\1\1\120\6\1\1\162\1\163\1\164"+
    "\1\165\1\166\3\1\1\167\147\1\2\13\1\143\2\13\1\143\10\13\1\170\1\171\2\13"+
    "\1\126\3\13\1\172\1\1\1\13\1\107\4\173\4\1\1\103\35\1\1\174\2\1\1\175\1\25"+
    "\4\13\1\176\1\25\4\13\1\127\1\104\1\13\1\144\1\25\4\13\1\143\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4\1\2\13\1\144"+
    "\20\13\1\120\1\13\1\177\1\1\2\13\1\143\1\103\1\13\1\144\4\13\1\40\2\1\1\200"+
    "\1\201\5\13\1\202\1\13\1\144\1\27\3\1\1\200\1\203\1\13\1\31\1\1\3\13\1\140"+
    "\1\201\2\13\1\140\3\1\1\204\1\42\1\13\1\40\1\13\1\107\1\1\1\13\1\120\1\50"+
    "\2\13\1\31\1\103\1\1\1\205\1\206\2\13\1\46\1\1\1\207\1\1\1\13\1\210\3\13\1"+
    "\211\1\212\1\213\1\30\1\64\1\214\1\215\1\173\2\13\1\127\1\40\7\13\1\31\1\1"+
    "\72\13\1\140\1\13\1\216\2\13\1\145\20\1\26\13\1\144\6\13\1\75\2\1\1\107\1"+
    "\217\1\55\1\220\1\221\6\13\1\16\1\1\1\150\25\13\1\144\1\1\4\13\1\201\2\13"+
    "\1\27\2\1\1\145\7\1\1\205\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1\222\4\13\1"+
    "\143\1\223\1\224\2\1\1\225\1\13\1\14\1\226\2\144\2\1\7\13\1\30\30\1\1\13\1"+
    "\120\3\13\1\67\2\1\2\13\1\1\1\13\1\227\2\13\1\40\1\13\1\144\2\13\1\230\3\1"+
    "\11\13\1\144\6\1\2\13\1\27\3\13\1\140\11\1\23\13\1\107\1\13\1\40\1\27\11\1"+
    "\1\231\2\13\1\232\1\13\1\40\1\13\1\107\1\13\1\143\4\1\1\13\1\233\1\13\1\40"+
    "\1\13\1\75\4\1\3\13\1\234\4\1\1\67\1\235\1\13\1\140\2\1\1\13\1\120\1\13\1"+
    "\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4"+
    "\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\150\2\13\1\27\4\1\1\150\2\13\2\1\1"+
    "\13\1\46\1\1\1\150\1\13\1\107\2\1\2\13\1\236\1\150\2\13\1\31\1\237\1\240\2"+
    "\1\1\13\1\22\1\145\5\1\1\241\1\242\1\46\2\13\1\143\2\1\1\71\1\54\1\55\1\66"+
    "\1\1\1\243\1\16\21\1\3\13\1\1\1\244\13\1\2\13\1\143\2\1\1\245\2\1\3\13\1\1"+
    "\1\246\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3\13\1\46\20\1"+
    "\71\13\1\75\16\1\14\13\1\140\53\1\2\13\1\143\75\1\44\13\1\107\33\1\43\13\1"+
    "\46\1\13\1\143\7\1\1\13\1\144\1\1\3\13\1\1\1\140\1\1\1\150\1\247\1\13\67\1"+
    "\4\13\1\47\1\67\3\1\1\150\6\1\1\16\77\1\6\13\1\30\1\120\1\46\1\75\66\1\5\13"+
    "\1\205\3\13\1\137\1\250\1\251\1\252\3\13\1\253\1\254\1\13\1\255\1\256\1\36"+
    "\24\13\1\257\1\13\1\36\1\127\1\13\1\127\1\13\1\205\1\13\1\205\1\143\1\13\1"+
    "\143\1\13\1\55\1\13\1\55\1\13\1\207\3\1\14\13\1\47\123\1\1\252\1\13\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\266\1\145\1\267\1\145\24\1\55\13\1\107\2"+
    "\1\103\13\1\47\15\13\1\144\150\13\1\16\25\1\41\13\1\144\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\20\1\3\1\24\1\25\1\4\22\0\1\20\1\37\1\34\1\12\1\14\1\10\1\105\1\33"+
    "\1\26\1\23\1\22\1\31\1\101\1\46\1\27\1\21\1\16\7\6\2\5\1\42\1\102\1\43\1\44"+
    "\1\45\1\104\1\36\4\7\1\30\1\7\21\1\1\17\2\1\1\35\1\32\1\103\1\13\1\2\1\41"+
    "\1\50\1\51\1\71\1\65\1\56\1\74\1\70\1\76\1\62\1\1\1\77\1\72\1\67\1\64\1\60"+
    "\1\55\1\75\1\57\1\52\1\53\1\66\1\61\1\63\1\73\1\54\1\100\1\11\1\40\1\15\1"+
    "\47\6\0\1\24\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12\1\4\0\14\1\16\0\5\1"+
    "\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1"+
    "\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1\1\6\0\10\1\10\0\13\1\5\0"+
    "\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\2\1\1\0\16\1\15\0\11\1"+
    "\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11"+
    "\1\7\0\5\1\17\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1\4\0\10\1\2\0\2\1\2\0\26\1\1"+
    "\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1"+
    "\0\2\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1"+
    "\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3"+
    "\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0"+
    "\2\1\10\0\3\1\5\0\4\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1\1\21\0\1\1\5"+
    "\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2\1\15\0\2\1\1\0\1"+
    "\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1\1\0\24\1\13\0\5\1\3\0"+
    "\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0"+
    "\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\0\10\1\7\0\15\1\1"+
    "\0\6\1\23\0\1\1\4\0\1\1\3\0\11\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\14\1\13\0\1"+
    "\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0\10\1\1\0\1\1\1"+
    "\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\14"+
    "\0\2\24\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1\13\0\5\1"+
    "\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0\2\1\3\0\7"+
    "\1\6\0\3\1\12\0\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0"+
    "\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\0\5\1\1\0\3\1\1\0\10\1\4\0\7\1\3"+
    "\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2"+
    "\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1"+
    "\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1"+
    "\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2"+
    "\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0"+
    "\4\1\25\0\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0\3\1\4"+
    "\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2\0\4\1"+
    "\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4"+
    "\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1"+
    "\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1"+
    "\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\1\1\30\21\1\1\31\1\32\1\33"+
    "\1\34\1\1\4\35\1\36\2\37\2\40\1\41\1\42"+
    "\22\0\1\37\2\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\15\1\50\1\51\2\15\1\52\2\16\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\0\1\62\1\63"+
    "\1\64\1\65\1\66\1\1\1\67\23\1\1\70\1\1"+
    "\1\71\2\1\1\72\1\1\1\73\7\1\1\74\12\1"+
    "\1\75\1\1\1\76\1\77\1\100\1\101\1\37\7\0"+
    "\1\102\21\0\2\43\1\103\1\104\1\0\1\16\1\0"+
    "\1\105\1\106\1\107\2\1\1\110\1\1\1\111\4\1"+
    "\1\112\2\1\1\113\12\1\1\114\3\1\1\115\1\111"+
    "\2\1\1\116\1\117\14\1\1\120\1\121\5\1\1\122"+
    "\1\75\20\0\1\123\3\0\1\124\5\0\1\125\1\43"+
    "\2\103\1\126\1\127\16\1\1\130\1\131\7\1\1\132"+
    "\4\1\1\133\2\1\1\117\4\1\1\134\1\1\1\135"+
    "\7\1\1\136\1\1\1\120\1\1\1\120\1\1\1\137"+
    "\1\1\1\122\1\0\1\140\3\0\1\141\1\142\34\0"+
    "\1\143\1\0\1\144\5\1\1\145\1\146\7\1\1\147"+
    "\1\130\3\1\1\117\10\1\1\150\1\1\1\151\5\1"+
    "\1\152\1\153\10\1\1\136\1\1\1\154\1\155\1\156"+
    "\1\0\1\157\1\160\1\161\4\0\1\162\1\0\1\163"+
    "\2\0\1\164\2\0\1\123\1\0\1\123\7\0\1\165"+
    "\1\124\3\0\1\166\4\0\1\125\1\0\3\1\1\167"+
    "\1\170\1\171\1\172\6\1\1\151\1\136\1\173\1\174"+
    "\1\175\4\1\1\176\4\1\1\177\1\200\5\1\1\201"+
    "\1\1\1\202\3\0\1\203\1\204\1\205\3\0\1\206"+
    "\1\207\1\210\4\0\1\124\5\0\2\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\1\1\1\220\12\1\1\221"+
    "\1\1\1\0\1\222\1\223\6\0\1\224\1\225\5\0"+
    "\2\1\1\226\1\1\2\227\1\230\2\231\1\232\1\233"+
    "\1\0\1\234\2\0\1\235\1\236\4\0\1\237\1\0"+
    "\1\240\1\241\1\0\1\242\7\0\1\243\1\244\1\245"+
    "\1\246\3\0\1\211\2\0\1\247\2\0\1\243";

  private static int [] zzUnpackAction() {
    int [] result = new int[614];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\322\0\u015e\0\u01a4"+
    "\0\u01ea\0\322\0\u0230\0\u0276\0\322\0\u02bc\0\u0302\0\322"+
    "\0\u0348\0\u038e\0\322\0\u03d4\0\u041a\0\322\0\u0460\0\u04a6"+
    "\0\322\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\322"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\322\0\322\0\322\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\322\0\u0c4e\0\322\0\u0c94\0\u0cda\0\u0d20\0\322\0\322"+
    "\0\322\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a"+
    "\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u1482\0\u1482\0\u14c8\0\322"+
    "\0\u1482\0\u150e\0\322\0\322\0\322\0\322\0\u1554\0\322"+
    "\0\322\0\322\0\u159a\0\u15e0\0\u1626\0\322\0\u166c\0\322"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u0118\0\u1c70\0\u0118"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u0118\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u0118\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274"+
    "\0\u22ba\0\322\0\u2300\0\322\0\322\0\u2346\0\u238c\0\u23d2"+
    "\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602"+
    "\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62"+
    "\0\u2aa8\0\u2aee\0\322\0\u2b34\0\u2b7a\0\u2bc0\0\322\0\322"+
    "\0\322\0\u2c06\0\u2c4c\0\u0118\0\u2c92\0\u0118\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u0118\0\u2df0\0\u2e36\0\u0118\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u0118\0\u3138\0\u317e\0\u31c4\0\u0118\0\u320a\0\u3250\0\u3296"+
    "\0\u0118\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480"+
    "\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u0118"+
    "\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u0118\0\u3854"+
    "\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\322\0\322\0\u4042\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8"+
    "\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u0118\0\u44a2"+
    "\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646\0\u0118\0\u468c"+
    "\0\u46d2\0\u4718\0\u475e\0\322\0\u47a4\0\u47ea\0\322\0\u4830"+
    "\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u0118\0\u49d4\0\u4a1a"+
    "\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\322"+
    "\0\u4c4a\0\u0118\0\u4c90\0\322\0\u4cd6\0\322\0\u4d1c\0\322"+
    "\0\u4d62\0\u4da8\0\u4dee\0\322\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06"+
    "\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136"+
    "\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366"+
    "\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596"+
    "\0\u55dc\0\u5622\0\u5668\0\322\0\u56ae\0\u56f4\0\u573a\0\u5780"+
    "\0\u57c6\0\322\0\u0118\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924"+
    "\0\u596a\0\u59b0\0\u0118\0\322\0\u59f6\0\u5a3c\0\u5a82\0\u0118"+
    "\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2"+
    "\0\322\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c"+
    "\0\u0118\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086"+
    "\0\u60cc\0\u6112\0\322\0\u6158\0\u0118\0\322\0\322\0\u619e"+
    "\0\322\0\322\0\322\0\u61e4\0\u622a\0\u6270\0\u62b6\0\322"+
    "\0\u62fc\0\322\0\u6342\0\u6388\0\322\0\u63ce\0\u6414\0\322"+
    "\0\u645a\0\u64a0\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644"+
    "\0\u668a\0\322\0\322\0\u66d0\0\u6716\0\u675c\0\322\0\u67a2"+
    "\0\u67e8\0\u682e\0\u6874\0\322\0\u68ba\0\u6900\0\u6946\0\u698c"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4"+
    "\0\u6aea\0\u6b30\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u6b76"+
    "\0\u6bbc\0\u6c02\0\u6c48\0\u0118\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60"+
    "\0\322\0\u0118\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\u6ebe\0\u0118"+
    "\0\u6f04\0\322\0\u6f4a\0\u6f90\0\u6fd6\0\322\0\322\0\322"+
    "\0\u701c\0\u7062\0\u70a8\0\u70ee\0\322\0\322\0\u7134\0\u717a"+
    "\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364\0\u73aa"+
    "\0\u0118\0\u73f0\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u7436\0\u0118\0\u747c\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da"+
    "\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u0118\0\u7738\0\u777e\0\322"+
    "\0\322\0\u77c4\0\u780a\0\u7850\0\u7896\0\u78dc\0\u7922\0\322"+
    "\0\322\0\u7968\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c"+
    "\0\u0118\0\u7b52\0\u0118\0\u7b98\0\u0118\0\u0118\0\u7bde\0\u0118"+
    "\0\322\0\u7c24\0\322\0\u7c6a\0\u7cb0\0\322\0\322\0\u7cf6"+
    "\0\u7d3c\0\u7d82\0\u7dc8\0\322\0\u7e0e\0\u0118\0\u0118\0\u7e54"+
    "\0\322\0\u7e9a\0\u7ee0\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e"+
    "\0\u8084\0\322\0\322\0\322\0\u80ca\0\u8110\0\u8156\0\322"+
    "\0\u819c\0\u81e2\0\322\0\u8228\0\u826e\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[614];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\2\10\1\5\1\11\1\12"+
    "\1\13\1\4\1\14\1\15\1\16\1\5\1\6\1\17"+
    "\1\4\1\20\1\4\1\6\1\21\1\22\1\5\1\4"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\5\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\5\1\56\1\5\1\57"+
    "\1\60\1\5\1\61\4\5\1\62\1\63\1\64\1\65"+
    "\1\66\106\4\22\67\1\70\1\71\2\67\1\72\57\67"+
    "\107\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\31\5\10\0\1\73\107\0\2\10\7\0\1\10"+
    "\10\0\1\74\1\75\25\0\1\75\40\0\1\76\3\0"+
    "\1\77\10\0\1\100\114\0\1\101\12\0\1\102\2\0"+
    "\1\103\1\0\1\104\1\105\3\0\1\106\2\0\1\107"+
    "\1\110\67\0\1\111\1\112\1\113\1\114\2\0\1\115"+
    "\1\116\1\0\1\117\3\0\1\120\1\0\1\121\1\0"+
    "\1\122\1\123\20\0\1\124\1\125\7\0\1\125\1\126"+
    "\7\0\1\74\1\75\25\0\1\75\14\0\1\126\33\0"+
    "\1\127\106\0\1\130\70\0\2\131\7\0\1\131\10\0"+
    "\1\132\13\0\1\133\42\0\3\134\2\0\4\134\1\135"+
    "\14\134\1\136\3\134\1\137\1\140\1\134\1\141\50\134"+
    "\3\25\2\0\25\25\1\142\1\25\1\143\51\25\11\0"+
    "\1\144\14\0\1\145\6\0\1\146\51\0\2\147\4\0"+
    "\1\147\7\0\1\147\10\0\1\147\17\0\31\147\33\0"+
    "\1\150\122\0\1\151\107\0\1\152\61\0\1\153\21\0"+
    "\1\154\1\0\1\155\67\0\1\156\121\0\1\157\1\0"+
    "\1\160\41\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\1\5\1\161\1\162\11\5\1\163\1\164"+
    "\4\5\1\165\6\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\6\5\1\166\22\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\3\5\1\167\1\170\3\5\1\171\1\5\1\172\6\5"+
    "\1\173\7\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\4\5\1\174\2\5\1\175\16\5"+
    "\1\176\1\177\1\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\7\5\1\200\1\201\20\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\14\5\1\202\5\5\1\203\1\204\5\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\205\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\5\5\1\206\3\5\1\207"+
    "\12\5\1\210\4\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\1\211\11\5\1\212\16\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\14\5\1\213\2\5\1\214\4\5\1\215\4\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\7\5\1\216\2\5\1\217\13\5\1\220\2\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\3\5\1\221\4\5\1\222\20\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\1\223"+
    "\3\5\1\224\3\5\1\225\20\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\1\226\30\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\1\227\21\5\1\230\6\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\1\231\5\5"+
    "\1\232\1\5\1\233\11\5\1\234\6\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\7\5"+
    "\1\235\1\236\1\5\1\237\1\5\1\240\1\5\1\241"+
    "\12\5\33\0\1\242\60\0\2\243\4\0\1\243\7\0"+
    "\1\243\10\0\1\243\17\0\31\243\5\0\22\67\2\0"+
    "\2\67\1\0\57\67\23\0\1\244\104\0\1\245\70\0"+
    "\2\74\7\0\1\74\11\0\1\75\25\0\1\75\34\0"+
    "\2\246\7\0\1\246\12\0\1\246\14\0\1\246\51\0"+
    "\3\77\143\0\1\247\131\0\1\250\66\0\1\251\105\0"+
    "\1\252\4\0\1\253\5\0\1\254\77\0\1\255\7\0"+
    "\1\256\67\0\1\257\113\0\1\260\100\0\1\261\105\0"+
    "\1\262\124\0\1\263\65\0\1\264\7\0\1\265\112\0"+
    "\1\266\1\267\61\0\1\270\5\0\1\271\120\0\1\272"+
    "\72\0\1\273\103\0\1\274\111\0\1\275\77\0\1\276"+
    "\7\0\1\277\2\0\1\120\25\0\2\124\7\0\1\124"+
    "\10\0\1\74\1\75\25\0\1\75\34\0\1\124\1\125"+
    "\7\0\1\125\10\0\1\74\1\75\25\0\1\75\34\0"+
    "\3\126\6\0\1\126\11\0\1\126\17\0\2\126\4\0"+
    "\1\126\6\0\1\126\3\0\1\126\2\0\1\126\11\0"+
    "\3\300\2\0\14\300\1\301\64\300\22\0\1\302\70\0"+
    "\2\131\7\0\1\131\11\0\1\75\25\0\1\75\56\0"+
    "\1\303\123\0\1\304\40\0\3\134\2\0\25\134\1\137"+
    "\1\140\55\134\2\0\101\134\4\25\1\305\101\25\1\0"+
    "\2\147\2\0\3\147\6\0\2\147\10\0\1\147\17\0"+
    "\31\147\51\0\1\306\106\0\1\307\105\0\1\310\105\0"+
    "\1\311\41\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\2\5\1\312\26\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\2\5\1\313"+
    "\26\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\15\5\1\314\13\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\15\5\1\315"+
    "\13\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\22\5\1\316\6\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\20\5\1\317"+
    "\10\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\1\320\30\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\17\5\1\321\11\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\7\5\1\322\21\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\24\5\1\323\4\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\1\324\30\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\5\5\1\325\23\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\4\5\1\326\24\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\6\5\1\327\22\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\12\5\1\330\16\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\1\331\5\5\1\332\1\5"+
    "\1\333\1\334\1\335\6\5\1\336\2\5\1\337\4\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\2\5\1\340\26\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\15\5\1\341\13\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\2\5\1\342\26\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\3\5\1\343\10\5"+
    "\1\316\4\5\1\344\7\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\21\5\1\345\2\5"+
    "\1\346\1\347\3\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\6\5\1\350\22\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\7\5\1\351\12\5\1\352\6\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\6\5\1\353"+
    "\22\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\24\5\1\354\4\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\5\5\1\355"+
    "\23\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\3\5\1\316\25\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\3\5\1\356"+
    "\25\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\6\5\1\357\3\5\1\360\16\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\17\5\1\316\11\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\14\5\1\361\14\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\3\5\1\362\25\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\14\5\1\363\14\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\21\5\1\364\7\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\2\5\1\365\26\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\1\366\30\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\17\5\1\367\11\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\3\5"+
    "\1\370\25\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\21\5\1\371\7\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\1\372"+
    "\30\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\6\5\1\373\22\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\7\5\1\374"+
    "\12\5\1\375\6\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\23\5\1\376\5\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\23\5\1\377\5\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\14\5\1\377\14\5\6\0"+
    "\2\243\2\0\3\243\6\0\2\243\10\0\1\243\17\0"+
    "\31\243\12\0\2\246\7\0\1\246\141\0\1\u0100\111\0"+
    "\1\u0101\111\0\1\u0102\102\0\1\u0103\113\0\1\u0104\72\0"+
    "\1\u0105\7\0\1\u0106\114\0\1\u0107\100\0\1\u0108\1\u0109"+
    "\114\0\1\u010a\76\0\1\u010b\77\0\1\u010c\104\0\1\u010d"+
    "\107\0\1\u010e\114\0\1\u010f\73\0\1\u0110\103\0\1\u0111"+
    "\126\0\1\u0112\73\0\1\u0113\114\0\1\u0114\74\0\1\u0115"+
    "\117\0\1\u0116\105\0\1\u0117\1\0\1\u0118\75\0\1\u0119"+
    "\74\0\1\u011a\104\0\1\276\33\0\3\300\2\0\104\300"+
    "\2\0\14\300\1\u011b\64\300\22\u011c\1\302\3\u011c\1\u011d"+
    "\57\u011c\27\0\1\u011e\56\0\4\25\1\0\25\25\1\142"+
    "\1\25\1\143\51\25\45\0\1\u011f\41\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\3\5\1\u0120"+
    "\1\5\1\u0121\3\5\1\u0122\17\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\16\5\1\u0123"+
    "\12\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\7\5\1\u0124\21\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\12\5\1\u0125"+
    "\16\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\3\5\1\u0126\11\5\1\u0127\3\5\1\u0128"+
    "\1\u0129\6\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\6\5\1\u012a\3\5\1\u012b\16\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\3\5\1\u012c\25\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\2\5\1\u012d\26\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\6\5\1\u012e\22\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\14\5\1\u012f\14\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\14\5\1\u0130\14\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\23\5\1\u0131\5\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\24\5\1\u0132\4\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\5\5\1\u0133\23\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\1\u0134\30\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\17\5\1\u0135\11\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\1\u0136\30\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\14\5\1\377\1\5\1\241\12\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\3\5\1\332\25\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\6\5\1\u0137\22\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\4\5\1\u0138\1\5\1\u0139\2\5\1\u013a\17\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\6\5\1\u013b\22\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\5\0\1\u013c\11\0\31\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\16\5\1\u013d\12\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\7\5\1\u013e\21\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\1\u013f\14\0\1\u013f\1\0\31\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\13\5\1\u0140"+
    "\15\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\12\5\1\u0141\16\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\10\5\1\u0142"+
    "\11\5\1\u0143\6\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\26\5\1\u0144\2\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\7\5\1\u0145\4\5\1\u0146\14\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\22\5\1\u0147"+
    "\6\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\24\5\1\u0148\4\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\1\u0149\30\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\22\5\1\u014a\6\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\7\5\1\u014b\5\5"+
    "\1\u014c\13\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\3\5\1\u014d\2\5\1\u014e\22\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\2\5\1\u014f\26\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\5\0\1\u0150\11\0\31\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\1\u0151\30\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\17\5\1\u0152\11\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u0153\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\2\0\1\u0154\5\0\1\5\17\0\31\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\15\5\1\u0155\13\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\5\0\1\u0156\11\0\31\5\63\0"+
    "\1\u0157\113\0\1\u0158\105\0\1\u0159\101\0\1\u015a\107\0"+
    "\1\u015b\101\0\1\u015c\123\0\1\u015d\103\0\1\u015e\100\0"+
    "\1\u015f\76\0\1\u0160\111\0\1\u0161\101\0\1\u0162\104\0"+
    "\1\u0163\100\0\1\u0164\120\0\1\u0165\77\0\1\u0166\32\0"+
    "\1\u0167\67\0\1\u0168\67\0\1\u0169\1\0\1\u016a\2\0"+
    "\1\u016b\5\0\1\u016c\4\0\1\u016d\2\0\1\u016e\75\0"+
    "\1\u016f\70\0\1\u0170\35\0\1\u0171\55\0\1\u0172\102\0"+
    "\1\u0173\100\0\1\u0174\115\0\1\u0175\107\0\1\u0176\3\0"+
    "\1\u0177\72\0\1\u0178\34\0\1\u0179\103\0\3\u011b\2\u017a"+
    "\17\u011b\2\300\60\u011b\22\u011c\1\u017b\63\u011c\45\0\1\u017c"+
    "\41\0\2\5\2\0\3\5\6\0\1\u017d\1\5\10\0"+
    "\1\5\17\0\4\5\1\u017e\24\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\7\5\1\u017f"+
    "\21\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\3\5\1\u0120\6\5\1\u0180\16\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\17\5\1\u0181\11\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\5\0\1\u0182\11\0\31\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\14\5\1\u0183\14\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\12\5\1\u0184\16\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u0185\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\2\5\1\u0186\26\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\10\5\1\u0187\20\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\22\5\1\u0188\6\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\14\5\1\u0189\14\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\15\5\1\u018a\13\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u018b\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\1\u018c\14\0\1\u018c\1\0\15\5"+
    "\1\u018d\13\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\15\5\1\u018e\13\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\12\5"+
    "\1\377\16\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\12\5\1\u018f\16\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\15\5"+
    "\1\u018d\13\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\7\5\1\351\12\5\1\u0190\6\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\5\5\1\u0191\23\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\2\5\1\u0192\26\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\5\5\1\u0193\23\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\7\5\1\u0194\21\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\1\u0195\30\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\5\5\1\u0196\23\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\12\5\1\u0197\16\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\22\5\1\u0198\6\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\5\0"+
    "\1\u0199\11\0\3\5\1\u019a\11\5\1\u018d\13\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\23\5\1\u019b\5\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\7\5\1\u019c\21\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u019d\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\3\5\1\u019e\1\5\1\u019f"+
    "\3\5\1\u01a0\17\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\6\5\1\u01a1\22\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u01a2\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\12\5\1\u01a3\16\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\2\5\1\u01a4\1\u01a5\1\5\1\u01a6\3\5\1\u01a7\17\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\10\5\1\u01a8\20\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\10\5\1\u01a9\20\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\6\5\1\u01aa\22\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\24\5\1\241\4\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\1\u01ab\14\0\1\u01ab\1\0\31\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\2\5\1\u01ac"+
    "\26\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\22\5\1\u01ad\6\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\5\0\1\u01ae\11\0"+
    "\31\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\5\0\1\u01af\11\0\31\5\64\0\1\u01b0\101\0"+
    "\1\u01b1\111\0\1\u01b2\122\0\1\u01b3\75\0\1\u01b4\1\u01b5"+
    "\106\0\1\u01b6\75\0\1\u01b7\123\0\1\u01b8\75\0\1\u01b9"+
    "\115\0\1\u01ba\63\0\1\u01bb\1\u01bc\131\0\1\u01bd\61\0"+
    "\1\u01be\110\0\1\u01bf\102\0\1\u01c0\5\0\1\u01c1\102\0"+
    "\1\u01c2\104\0\1\u01c3\107\0\1\u01c4\76\0\1\u01c5\126\0"+
    "\1\u01c6\105\0\1\u01c7\76\0\1\u01c8\73\0\1\u01c9\113\0"+
    "\1\u01ca\102\0\1\u01cb\5\0\1\u01cc\103\0\1\u01cd\102\0"+
    "\1\u01ce\105\0\1\u01cf\122\0\1\u01d0\106\0\1\u01d1\77\0"+
    "\1\u01d2\103\0\1\u01d3\76\0\1\u01d4\5\0\1\u01d5\24\0"+
    "\24\u017a\2\0\60\u017a\22\u011c\1\u017b\1\u011d\62\u011c\1\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\4\5\1\u017e\24\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\5\5\1\u01d6\23\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\10\5\1\u01d7\20\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\6\5\1\u01d8\22\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u01d9\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\21\5\1\u01da\7\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\24\5\1\u01db\4\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\3\5\1\u01dc\25\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\1\u01dd\30\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\12\5\1\u01de\16\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\3\5"+
    "\1\u01df\25\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\6\5\1\u01e0\22\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\6\5"+
    "\1\u01e1\22\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\6\5\1\u01e2\22\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\23\5"+
    "\1\u01e3\5\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\22\5\1\u0143\6\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\6\5"+
    "\1\u01e4\22\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\6\5\1\u01e5\22\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\14\5"+
    "\1\u01e6\14\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\7\5\1\u01e7\21\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\3\5"+
    "\1\u01e8\25\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\7\5\1\u01e9\21\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\10\5"+
    "\1\u01ea\20\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\4\5\1\u01eb\24\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\7\5"+
    "\1\u01e3\12\5\1\u01e3\6\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\3\5\1\u01ec\25\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\17\5\1\u01ed\11\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\4\5\1\u01ee\24\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\7\5\1\u01ef\21\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\12\5\1\u01f0\16\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\2\0\1\u01f1"+
    "\5\0\1\5\17\0\31\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\23\5\1\u01f2\5\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\10\5\1\u01f3\20\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\4\5\1\u01f4\24\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\7\5\1\u01f5\21\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\3\5\1\u01a5\6\5"+
    "\1\u01f6\16\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\1\u01f7\30\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\15\5\1\u014c"+
    "\13\5\6\0\2\5\2\0\3\5\6\0\2\5\10\0"+
    "\1\5\17\0\24\5\1\u01f8\4\5\6\0\2\5\2\0"+
    "\3\5\6\0\2\5\10\0\1\5\17\0\15\5\1\u01f9"+
    "\13\5\60\0\1\u01fa\117\0\1\u01fb\76\0\1\u01fc\114\0"+
    "\1\u01fd\114\0\1\u01fe\67\0\1\u01ff\127\0\1\u0200\64\0"+
    "\1\u0201\102\0\1\u0202\115\0\1\u0203\74\0\1\u01c0\34\0"+
    "\1\u0167\161\0\1\u0204\113\0\1\u0205\113\0\1\u0206\63\0"+
    "\1\u0207\105\0\1\u0208\121\0\1\u0209\73\0\1\u020a\106\0"+
    "\1\u01cb\117\0\1\u020b\76\0\1\u020c\77\0\1\u020d\113\0"+
    "\1\u020e\120\0\1\u020f\100\0\1\u0210\74\0\1\u01d4\33\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u0211\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\5\5\1\u0211\23\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\13\5\1\u0212\15\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\15\5\1\u0213\13\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\17\5\1\u0214\11\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\7\5\1\u0215\21\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\24\5\1\u0216\4\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\24\5\1\u0217\4\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\24\5\1\u0218\4\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\12\5\1\u0219\16\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\6\5\1\u021a\22\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\1\u021b\30\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\5\5"+
    "\1\u021c\23\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\6\5\1\u021d\22\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\5\5"+
    "\1\u021e\23\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\10\5\1\u021f\20\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\6\5"+
    "\1\u0220\22\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\7\5\1\u0221\21\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\5\5"+
    "\1\u0222\23\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\10\5\1\u0223\20\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\6\5"+
    "\1\u0224\22\5\6\0\2\5\2\0\3\5\6\0\2\5"+
    "\10\0\1\5\17\0\15\5\1\u0225\13\5\6\0\2\5"+
    "\2\0\3\5\6\0\2\5\10\0\1\5\17\0\6\5"+
    "\1\u0226\22\5\63\0\1\u0227\123\0\1\u0228\67\0\1\u0229"+
    "\101\0\1\u022a\110\0\1\u022b\111\0\1\u022c\26\0\1\u022d"+
    "\175\0\1\u022e\105\0\1\u022f\100\0\1\u0230\117\0\1\u0231"+
    "\10\0\1\u0171\167\0\1\u0232\74\0\1\u0233\116\0\1\u0234"+
    "\74\0\1\u0235\120\0\1\u0236\20\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\3\5\1\u0237\25\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\10\5\1\u0238\20\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\15\5\1\u0239\13\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\6\5\1\u0133\22\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\14\5\1\u023a\14\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\6\5\1\u023b\22\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\5\5\1\u023b\23\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\13\5\1\u023c\15\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\3\5\1\u023d\25\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\6\5\1\u023e\22\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\5\5\1\u023e\23\5"+
    "\6\0\2\5\2\0\3\5\6\0\2\5\10\0\1\5"+
    "\17\0\13\5\1\u023f\15\5\6\0\2\5\2\0\3\5"+
    "\6\0\2\5\10\0\1\5\17\0\21\5\1\u0240\7\5"+
    "\101\0\1\u0241\73\0\1\u0242\101\0\1\u0243\105\0\1\u0244"+
    "\101\0\1\u0245\125\0\1\u0246\105\0\1\u0247\74\0\1\u0248"+
    "\106\0\1\u0249\73\0\1\u024a\117\0\1\u024b\101\0\1\u024c"+
    "\30\0\2\5\2\0\3\5\6\0\1\u017d\1\5\10\0"+
    "\1\5\5\0\1\u024d\11\0\4\5\1\u017e\24\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\14\5\1\u024e\14\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\3\5\1\u024f\25\5\6\0"+
    "\2\5\2\0\3\5\6\0\2\5\10\0\1\5\17\0"+
    "\3\5\1\u019e\25\5\6\0\2\5\2\0\3\5\6\0"+
    "\2\5\10\0\1\5\17\0\3\5\1\u01a5\25\5\105\0"+
    "\1\u0250\64\0\1\u0251\101\0\1\u0252\34\0\1\u0253\163\0"+
    "\1\u0254\114\0\1\u0255\76\0\1\u0256\101\0\1\u0257\107\0"+
    "\1\u0200\106\0\1\u0258\107\0\1\u0259\110\0\1\u025a\77\0"+
    "\1\u025b\113\0\1\u025c\76\0\1\u025d\116\0\1\u025e\72\0"+
    "\1\u025f\110\0\1\u0260\120\0\1\u0261\42\0\1\u0262\132\0"+
    "\1\u0263\113\0\1\u0264\77\0\1\u0265\55\0\1\u0266\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\6\1\1\11\22\1\3\11\3\1\1\11\1\1\1\11"+
    "\3\1\3\11\22\0\14\1\1\11\2\1\4\11\1\1"+
    "\3\11\1\0\2\1\1\11\1\1\1\11\61\1\1\11"+
    "\1\1\2\11\1\1\7\0\1\1\21\0\3\1\1\11"+
    "\1\0\1\1\1\0\3\11\66\1\20\0\1\1\3\0"+
    "\1\1\5\0\3\1\2\11\35\1\1\11\2\1\1\11"+
    "\20\1\1\11\3\1\1\11\1\1\1\11\1\0\1\11"+
    "\3\0\1\11\1\1\34\0\1\1\1\0\1\11\5\1"+
    "\1\11\11\1\1\11\14\1\1\11\21\1\1\11\2\1"+
    "\2\11\1\0\3\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\1\7\0\2\11\3\0"+
    "\1\11\4\0\1\11\1\0\33\1\1\11\10\1\1\11"+
    "\3\0\3\11\3\0\1\1\2\11\4\0\1\1\5\0"+
    "\26\1\1\0\2\11\6\0\2\11\5\0\12\1\1\11"+
    "\1\0\1\11\2\0\2\11\4\0\1\11\1\0\2\1"+
    "\1\0\1\11\7\0\1\1\3\11\3\0\1\11\2\0"+
    "\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[614];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int openCommentCount;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              openCommentCount = 0;
                              yybegin(YYINITIAL);
                              return ATSTokenTypes.COMMENT_BLOCK;
            }
            case 615: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ATSTokenTypes.IDENTIFIER;
            }
          case 168: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 169: break;
          case 3: 
            { return ATSTokenTypes.INT;
            }
          case 170: break;
          case 4: 
            { return ATSTokenTypes.PERCENT;
            }
          case 171: break;
          case 5: 
            { return ATSTokenTypes.LBRACE;
            }
          case 172: break;
          case 6: 
            { return ATSTokenTypes.HASH;
            }
          case 173: break;
          case 7: 
            { return ATSTokenTypes.DOLLAR;
            }
          case 174: break;
          case 8: 
            { return ATSTokenTypes.RBRACE;
            }
          case 175: break;
          case 9: 
            { return ATSTokenTypes.RPAREN;
            }
          case 176: break;
          case 10: 
            { return ATSTokenTypes.LPAREN;
            }
          case 177: break;
          case 11: 
            { return ATSTokenTypes.DOT;
            }
          case 178: break;
          case 12: 
            { return ATSTokenTypes.BACKSLASH;
            }
          case 179: break;
          case 13: 
            { return ATSTokenTypes.CHAR;
            }
          case 180: break;
          case 14: 
            { return ATSTokenTypes.STRING;
            }
          case 181: break;
          case 15: 
            { return ATSTokenTypes.LBRACKET;
            }
          case 182: break;
          case 16: 
            { return ATSTokenTypes.AT;
            }
          case 183: break;
          case 17: 
            { return ATSTokenTypes.BANG;
            }
          case 184: break;
          case 18: 
            { return ATSTokenTypes.BAR;
            }
          case 185: break;
          case 19: 
            { return ATSTokenTypes.BQUOTE;
            }
          case 186: break;
          case 20: 
            { return ATSTokenTypes.COLON;
            }
          case 187: break;
          case 21: 
            { return ATSTokenTypes.LT;
            }
          case 188: break;
          case 22: 
            { return ATSTokenTypes.EQ;
            }
          case 189: break;
          case 23: 
            { return ATSTokenTypes.GT;
            }
          case 190: break;
          case 24: 
            { return ATSTokenTypes.TILDE;
            }
          case 191: break;
          case 25: 
            { return ATSTokenTypes.COMMA;
            }
          case 192: break;
          case 26: 
            { return ATSTokenTypes.SEMICOLON;
            }
          case 193: break;
          case 27: 
            { return ATSTokenTypes.RBRACKET;
            }
          case 194: break;
          case 28: 
            { return ATSTokenTypes.QMARK;
            }
          case 195: break;
          case 29: 
            { 
            }
          case 196: break;
          case 30: 
            { return ATSTokenTypes.CRLF;
            }
          case 197: break;
          case 31: 
            { return ATSTokenTypes.FLOAT;
            }
          case 198: break;
          case 32: 
            { return ATSTokenTypes.EXTCODE;
            }
          case 199: break;
          case 33: 
            { return ATSTokenTypes.PERCENTLPAREN;
            }
          case 200: break;
          case 34: 
            { return ATSTokenTypes.HASHLBRACKETOLON;
            }
          case 201: break;
          case 35: 
            { return ATSTokenTypes.COMMENT_LINE;
            }
          case 202: break;
          case 36: 
            { openCommentCount = 1; yybegin(BLOCK_COMMENT);
            }
          case 203: break;
          case 37: 
            { return ATSTokenTypes.DOTINT;
            }
          case 204: break;
          case 38: 
            { return ATSTokenTypes.DOTDOT;
            }
          case 205: break;
          case 39: 
            { return ATSTokenTypes.DOTLT;
            }
          case 206: break;
          case 40: 
            { return ATSTokenTypes.QUOTELBRACE;
            }
          case 207: break;
          case 41: 
            { return ATSTokenTypes.QUOTELPAREN;
            }
          case 208: break;
          case 42: 
            { return ATSTokenTypes.QUOTELBRACKET;
            }
          case 209: break;
          case 43: 
            { return ATSTokenTypes.ATLBRACE;
            }
          case 210: break;
          case 44: 
            { return ATSTokenTypes.ATLPAREN;
            }
          case 211: break;
          case 45: 
            { return ATSTokenTypes.ATLBRACKET;
            }
          case 212: break;
          case 46: 
            { return ATSTokenTypes.VAL_IDENTIFIER;
            }
          case 213: break;
          case 47: 
            { return ATSTokenTypes.BQUOTELPAREN;
            }
          case 214: break;
          case 48: 
            { return ATSTokenTypes.COLONLT;
            }
          case 215: break;
          case 49: 
            { return ATSTokenTypes.GTLT;
            }
          case 216: break;
          case 50: 
            { return ATSTokenTypes.EQLT;
            }
          case 217: break;
          case 51: 
            { return ATSTokenTypes.EQGT;
            }
          case 218: break;
          case 52: 
            { return ATSTokenTypes.GTDOT;
            }
          case 219: break;
          case 53: 
            { return ATSTokenTypes.MINUSLT;
            }
          case 220: break;
          case 54: 
            { return ATSTokenTypes.MINUSGT;
            }
          case 221: break;
          case 55: 
            { return ATSTokenTypes.AS;
            }
          case 222: break;
          case 56: 
            { return ATSTokenTypes.OP;
            }
          case 223: break;
          case 57: 
            { return ATSTokenTypes.OF;
            }
          case 224: break;
          case 58: 
            { return ATSTokenTypes.IN;
            }
          case 225: break;
          case 59: 
            { return ATSTokenTypes.IF;
            }
          case 226: break;
          case 60: 
            { return ATSTokenTypes.DO;
            }
          case 227: break;
          case 61: 
            { return ATSTokenTypes.FUN;
            }
          case 228: break;
          case 62: 
            { return ATSTokenTypes.COMMALPAREN;
            }
          case 229: break;
          case 63: 
            { return ATSTokenTypes.REF_IDENTIFIER;
            }
          case 230: break;
          case 64: 
            { openCommentCount -= 1;
                              if (openCommentCount == 0) {
                                yybegin(YYINITIAL);
                                return ATSTokenTypes.COMMENT_BLOCK;
                              }
            }
          case 231: break;
          case 65: 
            { openCommentCount += 1;
            }
          case 232: break;
          case 66: 
            { return ATSTokenTypes.SRPIF;
            }
          case 233: break;
          case 67: 
            { return ATSTokenTypes.COMMENT_DOC;
            }
          case 234: break;
          case 68: 
            { return ATSTokenTypes.DOTDOTDOT;
            }
          case 235: break;
          case 69: 
            { return ATSTokenTypes.EQLTGT;
            }
          case 236: break;
          case 70: 
            { return ATSTokenTypes.EQGTGT;
            }
          case 237: break;
          case 71: 
            { return ATSTokenTypes.MINUSLTGT;
            }
          case 238: break;
          case 72: 
            { return ATSTokenTypes.AND;
            }
          case 239: break;
          case 73: 
            { return ATSTokenTypes.DLREFFMASK_ARG;
            }
          case 240: break;
          case 74: 
            { return ATSTokenTypes.SIF;
            }
          case 241: break;
          case 75: 
            { return ATSTokenTypes.TRY;
            }
          case 242: break;
          case 76: 
            { return ATSTokenTypes.END;
            }
          case 243: break;
          case 77: 
            { return ATSTokenTypes.REC;
            }
          case 244: break;
          case 78: 
            { return ATSTokenTypes.VAR;
            }
          case 245: break;
          case 79: 
            { return ATSTokenTypes.VAL;
            }
          case 246: break;
          case 80: 
            { return ATSTokenTypes.LAM;
            }
          case 247: break;
          case 81: 
            { return ATSTokenTypes.LET;
            }
          case 248: break;
          case 82: 
            { return ATSTokenTypes.FIX;
            }
          case 249: break;
          case 83: 
            { return ATSTokenTypes.DLRTUP;
            }
          case 250: break;
          case 84: 
            { return ATSTokenTypes.DLRREC;
            }
          case 251: break;
          case 85: 
            { return ATSTokenTypes.DLRLST;
            }
          case 252: break;
          case 86: 
            { return ATSTokenTypes.DOTLTGTDOT;
            }
          case 253: break;
          case 87: 
            { return ATSTokenTypes.EQSLASHEQGT;
            }
          case 254: break;
          case 88: 
            { return ATSTokenTypes.TYPE;
            }
          case 255: break;
          case 89: 
            { return ATSTokenTypes.THEN;
            }
          case 256: break;
          case 90: 
            { return ATSTokenTypes.ELSE;
            }
          case 257: break;
          case 91: 
            { return ATSTokenTypes.REFAT;
            }
          case 258: break;
          case 92: 
            { return ATSTokenTypes.WITH;
            }
          case 259: break;
          case 93: 
            { return ATSTokenTypes.WHEN;
            }
          case 260: break;
          case 94: 
            { return ATSTokenTypes.CASE;
            }
          case 261: break;
          case 95: 
            { return ATSTokenTypes.FORSTAR;
            }
          case 262: break;
          case 96: 
            { return ATSTokenTypes.SRPTHEN;
            }
          case 263: break;
          case 97: 
            { return ATSTokenTypes.SRPELSE;
            }
          case 264: break;
          case 98: 
            { return ATSTokenTypes.SRPELIF;
            }
          case 265: break;
          case 99: 
            { return ATSTokenTypes.COMMENT_REST;
            }
          case 266: break;
          case 100: 
            { return ATSTokenTypes.EQSLASHEQGTGT;
            }
          case 267: break;
          case 101: 
            { return ATSTokenTypes.ADDRAT;
            }
          case 268: break;
          case 102: 
            { return ATSTokenTypes.BEGIN;
            }
          case 269: break;
          case 103: 
            { return ATSTokenTypes.SCASE;
            }
          case 270: break;
          case 104: 
            { return ATSTokenTypes.VIEWAT;
            }
          case 271: break;
          case 105: 
            { return ATSTokenTypes.FIXITY;
            }
          case 272: break;
          case 106: 
            { return ATSTokenTypes.WHERE;
            }
          case 273: break;
          case 107: 
            { return ATSTokenTypes.WHILE;
            }
          case 274: break;
          case 108: 
            { return ATSTokenTypes.LOCAL;
            }
          case 275: break;
          case 109: 
            { return ATSTokenTypes.FREEAT;
            }
          case 276: break;
          case 110: 
            { return ATSTokenTypes.FOLDAT;
            }
          case 277: break;
          case 111: 
            { return ATSTokenTypes.SRPPRINT;
            }
          case 278: break;
          case 112: 
            { return ATSTokenTypes.SRPERROR;
            }
          case 279: break;
          case 113: 
            { return ATSTokenTypes.SRPENDIF;
            }
          case 280: break;
          case 114: 
            { return ATSTokenTypes.SRPIFDEF;
            }
          case 281: break;
          case 115: 
            { return ATSTokenTypes.SRPUNDEF;
            }
          case 282: break;
          case 116: 
            { return ATSTokenTypes.DLRBREAK;
            }
          case 283: break;
          case 117: 
            { return ATSTokenTypes.DLRRAISE;
            }
          case 284: break;
          case 118: 
            { return ATSTokenTypes.DLRDELAY;
            }
          case 285: break;
          case 119: 
            { return ATSTokenTypes.ASSUME;
            }
          case 286: break;
          case 120: 
            { return ATSTokenTypes.STATIC;
            }
          case 287: break;
          case 121: 
            { return ATSTokenTypes.STADEF;
            }
          case 288: break;
          case 122: 
            { return ATSTokenTypes.STACST;
            }
          case 289: break;
          case 123: 
            { return ATSTokenTypes.EXTYPE;
            }
          case 290: break;
          case 124: 
            { return ATSTokenTypes.EXTERN;
            }
          case 291: break;
          case 125: 
            { return ATSTokenTypes.EXTVAR;
            }
          case 292: break;
          case 126: 
            { return ATSTokenTypes.IMPORT;
            }
          case 293: break;
          case 127: 
            { return ATSTokenTypes.WHILESTAR;
            }
          case 294: break;
          case 128: 
            { return ATSTokenTypes.NONFIX;
            }
          case 295: break;
          case 129: 
            { return ATSTokenTypes.MACDEF;
            }
          case 296: break;
          case 130: 
            { return ATSTokenTypes.SRPASSERT;
            }
          case 297: break;
          case 131: 
            { return ATSTokenTypes.SRPIFNDEF;
            }
          case 298: break;
          case 132: 
            { return ATSTokenTypes.SRPDEFINE;
            }
          case 299: break;
          case 133: 
            { return ATSTokenTypes.DLRARRPSZ;
            }
          case 300: break;
          case 134: 
            { return ATSTokenTypes.DLREXTYPE;
            }
          case 301: break;
          case 135: 
            { return ATSTokenTypes.DLREXTERN;
            }
          case 302: break;
          case 136: 
            { return ATSTokenTypes.DLREXTVAL;
            }
          case 303: break;
          case 137: 
            { return ATSTokenTypes.ABSTYPE;
            }
          case 304: break;
          case 138: 
            { return ATSTokenTypes.SRPSTALOAD;
            }
          case 305: break;
          case 139: 
            { return ATSTokenTypes.SYMELIM;
            }
          case 306: break;
          case 140: 
            { return ATSTokenTypes.SYMINTR;
            }
          case 307: break;
          case 141: 
            { return ATSTokenTypes.SORTDEF;
            }
          case 308: break;
          case 142: 
            { return ATSTokenTypes.TYPEDEF;
            }
          case 309: break;
          case 143: 
            { return ATSTokenTypes.TKINDEF;
            }
          case 310: break;
          case 144: 
            { return ATSTokenTypes.REQUIRE;
            }
          case 311: break;
          case 145: 
            { return ATSTokenTypes.SRPDYNLOAD;
            }
          case 312: break;
          case 146: 
            { return ATSTokenTypes.SRPELIFDEF;
            }
          case 313: break;
          case 147: 
            { return ATSTokenTypes.SRPINCLUDE;
            }
          case 314: break;
          case 148: 
            { return ATSTokenTypes.DLREXTKIND;
            }
          case 315: break;
          case 149: 
            { return ATSTokenTypes.DLREFFMASK;
            }
          case 316: break;
          case 150: 
            { return ATSTokenTypes.OVERLOAD;
            }
          case 317: break;
          case 151: 
            { return ATSTokenTypes.WITHTYPE;
            }
          case 318: break;
          case 152: 
            { return ATSTokenTypes.DATASORT;
            }
          case 319: break;
          case 153: 
            { return ATSTokenTypes.DATATYPE;
            }
          case 320: break;
          case 154: 
            { return ATSTokenTypes.CLASSDEC;
            }
          case 321: break;
          case 155: 
            { return ATSTokenTypes.SRPELIFNDEF;
            }
          case 322: break;
          case 156: 
            { return ATSTokenTypes.DLRSHOWTYPE;
            }
          case 323: break;
          case 157: 
            { return ATSTokenTypes.DLREXTMCALL;
            }
          case 324: break;
          case 158: 
            { return ATSTokenTypes.DLREXTFCALL;
            }
          case 325: break;
          case 159: 
            { return ATSTokenTypes.DLRCONTINUE;
            }
          case 326: break;
          case 160: 
            { return ATSTokenTypes.EXCEPTION;
            }
          case 327: break;
          case 161: 
            { return ATSTokenTypes.IMPLEMENT;
            }
          case 328: break;
          case 162: 
            { return ATSTokenTypes.DLRTEMPENVER;
            }
          case 329: break;
          case 163: 
            { return ATSTokenTypes.DLRVCOPYENV;
            }
          case 330: break;
          case 164: 
            { return ATSTokenTypes.DLRMYLOCATION;
            }
          case 331: break;
          case 165: 
            { return ATSTokenTypes.DLRMYFILENAME;
            }
          case 332: break;
          case 166: 
            { return ATSTokenTypes.DLRMYFUNCTION;
            }
          case 333: break;
          case 167: 
            { return ATSTokenTypes.DLREXTYPE_STRUCT;
            }
          case 334: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
