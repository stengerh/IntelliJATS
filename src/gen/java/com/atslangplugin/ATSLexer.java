/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.atslangplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
//TODO: static import this
import com.atslangplugin.psi.ATSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Holger_2/Documents/Projects/IntelliJATS/src/main/grammar/ATS.flex</tt>
 */
public class ATSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int PRE = 4;
  public static final int PRAGMA = 6;
  public static final int DEFINE = 8;
  public static final int DEFINE_CONTINUATION = 10;
  public static final int CONTINUATION = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\76\1\36\1\55\1\100\1\1\1\57\1\16\1\101\1\76\1\36\1\13\1\102\1"+
    "\57\1\103\1\16\1\42\1\104\1\105\1\13\1\106\1\107\3\1\1\25\2\13\1\110\1\107"+
    "\3\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\67\3\1\1\117\1\13\1\120\1\1"+
    "\1\121\7\1\2\13\1\30\1\103\1\1\1\122\1\123\1\124\1\125\1\1\2\13\1\126\2\13"+
    "\1\127\24\13\1\130\1\131\2\13\1\130\2\13\1\132\1\133\1\14\3\13\1\133\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\134\1\25\45\13\1\135\1\13\1\25\1\30\4\13\1\30\1"+
    "\136\1\137\1\16\1\13\1\16\1\13\1\16\1\137\1\67\3\13\1\140\1\1\1\141\4\1\5"+
    "\13\1\27\2\13\1\142\4\13\1\40\1\13\1\143\3\1\1\13\1\144\1\47\2\13\1\145\1"+
    "\13\1\75\3\1\1\13\1\107\3\13\1\47\4\1\1\146\5\1\1\104\2\13\1\140\1\147\3\1"+
    "\1\150\1\13\1\151\1\42\2\13\1\40\1\1\2\13\1\140\1\1\1\37\1\42\1\13\1\144\6"+
    "\1\1\152\1\153\14\13\4\1\21\13\1\134\2\13\1\134\1\154\1\13\1\144\3\13\1\155"+
    "\1\156\1\157\1\120\1\156\2\1\1\160\4\1\1\161\1\1\1\120\6\1\1\162\1\163\1\164"+
    "\1\165\1\166\3\1\1\167\147\1\2\13\1\143\2\13\1\143\10\13\1\170\1\171\2\13"+
    "\1\126\3\13\1\172\1\1\1\13\1\107\4\173\4\1\1\103\35\1\1\174\2\1\1\175\1\25"+
    "\4\13\1\176\1\25\4\13\1\127\1\104\1\13\1\144\1\25\4\13\1\143\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\120\4\1\2\13\1\144"+
    "\20\13\1\120\1\13\1\177\1\1\2\13\1\143\1\103\1\13\1\144\4\13\1\40\2\1\1\200"+
    "\1\201\5\13\1\202\1\13\1\144\1\27\3\1\1\200\1\203\1\13\1\31\1\1\3\13\1\140"+
    "\1\201\2\13\1\140\3\1\1\204\1\42\1\13\1\40\1\13\1\107\1\1\1\13\1\120\1\50"+
    "\2\13\1\31\1\103\1\1\1\205\1\206\2\13\1\46\1\1\1\207\1\1\1\13\1\210\3\13\1"+
    "\211\1\212\1\213\1\30\1\64\1\214\1\215\1\173\2\13\1\127\1\40\7\13\1\31\1\1"+
    "\72\13\1\140\1\13\1\216\2\13\1\145\20\1\26\13\1\144\6\13\1\75\2\1\1\107\1"+
    "\217\1\55\1\220\1\221\6\13\1\16\1\1\1\150\25\13\1\144\1\1\4\13\1\201\2\13"+
    "\1\27\2\1\1\145\7\1\1\205\7\13\1\120\2\1\1\25\1\30\1\25\1\30\1\222\4\13\1"+
    "\143\1\223\1\224\2\1\1\225\1\13\1\14\1\226\2\144\2\1\7\13\1\30\30\1\1\13\1"+
    "\120\3\13\1\67\2\1\2\13\1\1\1\13\1\227\2\13\1\40\1\13\1\144\2\13\1\230\3\1"+
    "\11\13\1\144\6\1\2\13\1\27\3\13\1\140\11\1\23\13\1\107\1\13\1\40\1\27\11\1"+
    "\1\231\2\13\1\232\1\13\1\40\1\13\1\107\1\13\1\143\4\1\1\13\1\233\1\13\1\40"+
    "\1\13\1\75\4\1\3\13\1\234\4\1\1\67\1\235\1\13\1\140\2\1\1\13\1\120\1\13\1"+
    "\120\2\1\1\117\1\13\1\47\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4"+
    "\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\150\2\13\1\27\4\1\1\150\2\13\2\1\1"+
    "\13\1\46\1\1\1\150\1\13\1\107\2\1\2\13\1\236\1\150\2\13\1\31\1\237\1\240\2"+
    "\1\1\13\1\22\1\145\5\1\1\241\1\242\1\46\2\13\1\143\2\1\1\71\1\54\1\55\1\66"+
    "\1\1\1\243\1\16\21\1\3\13\1\1\1\244\13\1\2\13\1\143\2\1\1\245\2\1\3\13\1\1"+
    "\1\246\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\103\34\1\3\13\1\46\20\1"+
    "\71\13\1\75\16\1\14\13\1\140\53\1\2\13\1\143\75\1\44\13\1\107\33\1\43\13\1"+
    "\46\1\13\1\143\7\1\1\13\1\144\1\1\3\13\1\1\1\140\1\1\1\150\1\247\1\13\67\1"+
    "\4\13\1\47\1\67\3\1\1\150\6\1\1\16\77\1\6\13\1\30\1\120\1\46\1\75\66\1\5\13"+
    "\1\205\3\13\1\137\1\250\1\251\1\252\3\13\1\253\1\254\1\13\1\255\1\256\1\36"+
    "\24\13\1\257\1\13\1\36\1\127\1\13\1\127\1\13\1\205\1\13\1\205\1\143\1\13\1"+
    "\143\1\13\1\55\1\13\1\55\1\13\1\207\3\1\14\13\1\47\123\1\1\252\1\13\1\260"+
    "\1\261\1\262\1\263\1\264\1\265\1\266\1\145\1\267\1\145\24\1\55\13\1\107\2"+
    "\1\103\13\1\47\15\13\1\144\150\13\1\16\25\1\41\13\1\144\36\1");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\21\1\5\1\40\1\41\1\4\22\0\1\21\1\51\1\46\1\13\1\15\1\11\1\105\1\45"+
    "\1\37\1\36\1\35\1\44\1\101\1\60\1\42\1\34\1\17\7\7\2\6\1\54\1\102\1\55\1\56"+
    "\1\57\1\104\1\50\4\10\1\43\1\10\21\1\1\20\2\1\1\47\1\3\1\103\1\14\1\2\1\53"+
    "\1\62\1\63\1\24\1\27\1\30\1\31\1\73\1\76\1\22\1\1\1\77\1\25\1\72\1\23\1\33"+
    "\1\67\1\75\1\32\1\64\1\65\1\26\1\70\1\71\1\74\1\66\1\100\1\12\1\52\1\16\1"+
    "\61\6\0\1\40\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12\1\4\0\14\1\16\0\5\1"+
    "\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1"+
    "\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1\1\6\0\10\1\10\0\13\1\5\0"+
    "\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\2\1\1\0\16\1\15\0\11\1"+
    "\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11"+
    "\1\7\0\5\1\17\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1\4\0\10\1\2\0\2\1\2\0\26\1\1"+
    "\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1"+
    "\0\2\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1"+
    "\1\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3"+
    "\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0"+
    "\2\1\10\0\3\1\5\0\4\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1\1\21\0\1\1\5"+
    "\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2\1\15\0\2\1\1\0\1"+
    "\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1\1\0\24\1\13\0\5\1\3\0"+
    "\6\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0"+
    "\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\0\10\1\7\0\15\1\1"+
    "\0\6\1\23\0\1\1\4\0\1\1\3\0\11\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\14\1\13\0\1"+
    "\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0\10\1\1\0\1\1\1"+
    "\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\14"+
    "\0\2\40\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1\13\0\5\1"+
    "\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0\2\1\3\0\7"+
    "\1\6\0\3\1\12\0\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0"+
    "\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\0\5\1\1\0\3\1\1\0\10\1\4\0\7\1\3"+
    "\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2"+
    "\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1"+
    "\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1"+
    "\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2"+
    "\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0"+
    "\4\1\25\0\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0\3\1\4"+
    "\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2\0\4\1"+
    "\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4"+
    "\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1"+
    "\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1"+
    "\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\4\13\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\1\1\30\10\1\1\31\1\32\1\33"+
    "\1\34\1\1\1\35\2\36\2\37\1\40\4\0\1\41"+
    "\16\0\1\36\2\4\1\42\1\43\11\1\1\44\6\1"+
    "\1\45\4\1\1\46\1\47\1\1\1\50\1\51\1\0"+
    "\1\52\1\53\1\54\1\16\1\15\1\55\1\56\1\15"+
    "\1\57\2\16\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\0\1\67\1\70\1\71\1\72\1\73\4\1"+
    "\1\74\22\1\1\75\1\76\1\36\1\0\1\77\27\0"+
    "\3\1\1\100\3\1\1\101\1\1\1\102\2\1\1\103"+
    "\3\1\1\104\1\45\3\1\1\105\1\100\2\1\3\50"+
    "\1\51\1\106\1\107\1\0\1\15\1\16\1\0\1\110"+
    "\1\111\1\112\1\113\4\1\1\114\4\1\1\115\14\1"+
    "\1\116\1\117\4\1\15\0\1\120\3\0\1\121\4\0"+
    "\1\122\4\0\5\1\1\123\1\1\1\102\1\1\1\102"+
    "\2\1\1\124\4\1\1\104\2\1\1\125\1\126\2\1"+
    "\1\0\1\50\1\0\2\106\1\127\1\15\1\130\16\1"+
    "\1\131\1\132\10\1\1\116\1\133\1\1\1\134\3\1"+
    "\6\0\1\135\1\136\2\0\1\137\30\0\1\140\4\1"+
    "\1\123\1\141\11\1\1\142\1\143\2\1\1\50\1\144"+
    "\1\0\1\145\1\146\5\1\1\147\1\150\10\1\1\131"+
    "\4\1\1\116\1\151\4\1\1\152\1\153\2\1\2\0"+
    "\1\154\1\155\1\0\1\156\2\0\1\157\1\0\1\160"+
    "\1\0\1\120\1\0\1\161\7\0\1\121\2\0\1\162"+
    "\2\0\1\163\1\0\1\122\1\0\1\122\5\0\1\140"+
    "\1\1\1\164\1\165\7\1\1\166\1\167\1\170\2\1"+
    "\1\144\3\1\1\171\1\1\1\172\1\1\1\173\1\174"+
    "\4\1\1\123\4\1\1\175\1\176\1\0\1\177\1\200"+
    "\2\0\1\201\2\0\1\202\1\0\1\203\1\204\2\0"+
    "\1\121\1\205\7\0\6\1\1\206\1\1\1\207\1\1"+
    "\2\210\1\211\1\212\1\213\1\214\1\215\1\216\4\1"+
    "\1\217\1\0\1\220\1\0\1\221\3\0\1\222\7\0"+
    "\1\1\1\223\1\224\2\225\1\1\1\226\1\1\2\227"+
    "\1\230\1\231\1\232\1\0\1\233\1\0\1\234\5\0"+
    "\1\235\1\236\3\0\1\237\6\0\1\240\1\241\1\242"+
    "\1\243\3\0\1\210\2\0\1\244\2\0\1\240";

  private static int [] zzUnpackAction() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\214\0\u0118\0\214\0\u015e"+
    "\0\u01a4\0\214\0\u01ea\0\u0230\0\214\0\u0276\0\u02bc\0\u0302"+
    "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\214\0\u05be\0\u0604\0\u064a\0\u0690\0\214\0\u06d6"+
    "\0\u071c\0\214\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\214\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\214\0\214\0\214\0\u0b7c\0\214\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\214\0\214\0\u0c94\0\u0cda\0\u0d20\0\u0d66"+
    "\0\214\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\322\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\322\0\u150e\0\u1554"+
    "\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784"+
    "\0\u17ca\0\322\0\322\0\u1810\0\u1856\0\214\0\u189c\0\u18e2"+
    "\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u19b4\0\u19b4\0\214\0\u19b4"+
    "\0\u1a40\0\214\0\214\0\214\0\214\0\u1a86\0\214\0\214"+
    "\0\214\0\u1acc\0\u1b12\0\u1b58\0\214\0\u1b9e\0\214\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\214\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\322\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\322\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\322\0\u2c4c"+
    "\0\u2c92\0\u2cd8\0\u2d1e\0\322\0\u2d64\0\u2daa\0\u2df0\0\322"+
    "\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020"+
    "\0\214\0\u3066\0\u30ac\0\u30f2\0\u3138\0\214\0\214\0\214"+
    "\0\322\0\u317e\0\u31c4\0\u320a\0\u3250\0\322\0\u3296\0\u32dc"+
    "\0\u3322\0\u3368\0\322\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\322\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\322"+
    "\0\u41a0\0\214\0\u41e6\0\u422c\0\322\0\u4272\0\u42b8\0\u42fe"+
    "\0\u4344\0\214\0\u438a\0\u43d0\0\214\0\214\0\u4416\0\u445c"+
    "\0\u44a2\0\u44e8\0\u452e\0\u4574\0\214\0\214\0\u30f2\0\u45ba"+
    "\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea"+
    "\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\322"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04"+
    "\0\214\0\u4c4a\0\u4c90\0\322\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\214\0\u4f92"+
    "\0\u4fd8\0\214\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c"+
    "\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac"+
    "\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc"+
    "\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\214"+
    "\0\322\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0"+
    "\0\u59f6\0\u5a3c\0\214\0\214\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54"+
    "\0\u5b9a\0\214\0\214\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8"+
    "\0\322\0\322\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c"+
    "\0\u5ee2\0\u5f28\0\214\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\322"+
    "\0\214\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\322\0\u61e4"+
    "\0\u622a\0\u6270\0\u62b6\0\214\0\214\0\u62fc\0\214\0\u6342"+
    "\0\u6388\0\214\0\u63ce\0\214\0\u6414\0\214\0\u645a\0\214"+
    "\0\u64a0\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\214"+
    "\0\u668a\0\u66d0\0\214\0\u6716\0\u675c\0\214\0\u67a2\0\214"+
    "\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900\0\u6946\0\u698c\0\322"+
    "\0\u69d2\0\322\0\322\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30"+
    "\0\u6b76\0\u6bbc\0\322\0\322\0\322\0\u6c02\0\u6c48\0\u6c8e"+
    "\0\u6cd4\0\u6d1a\0\u6d60\0\322\0\u6da6\0\322\0\u6dec\0\322"+
    "\0\322\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\322\0\u6f4a\0\u6f90"+
    "\0\u6fd6\0\u701c\0\214\0\322\0\u7062\0\214\0\214\0\u70a8"+
    "\0\u70ee\0\214\0\u7134\0\u717a\0\214\0\u71c0\0\u7206\0\214"+
    "\0\u724c\0\u7292\0\u72d8\0\214\0\u731e\0\u7364\0\u73aa\0\u73f0"+
    "\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620"+
    "\0\u7666\0\322\0\u76ac\0\322\0\u76f2\0\322\0\u7738\0\322"+
    "\0\322\0\322\0\322\0\322\0\322\0\u777e\0\u77c4\0\u780a"+
    "\0\u7850\0\214\0\u7896\0\214\0\u78dc\0\214\0\u7922\0\u7968"+
    "\0\u79ae\0\214\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52"+
    "\0\u7b98\0\u7bde\0\322\0\322\0\322\0\u7c24\0\u7c6a\0\322"+
    "\0\u7cb0\0\322\0\u7cf6\0\214\0\214\0\214\0\u7d3c\0\214"+
    "\0\u7d82\0\214\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a\0\u7ee0\0\322"+
    "\0\322\0\u7f26\0\u7f6c\0\u7fb2\0\214\0\u7ff8\0\u803e\0\u8084"+
    "\0\u80ca\0\u8110\0\u8156\0\u819c\0\214\0\214\0\214\0\u81e2"+
    "\0\u8228\0\u826e\0\214\0\u82b4\0\u82fa\0\214\0\u8340\0\u8386"+
    "\0\214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\2\10\1\4\1\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\1\4\1\7"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\3\1\7"+
    "\1\34\1\4\1\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\4\1\56\1\57\1\60"+
    "\1\61\6\4\1\62\1\63\1\64\1\65\1\66\106\3"+
    "\107\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\16\0\17\4\12\0\1\67\106\0\2\10"+
    "\7\0\1\10\10\0\1\70\11\0\1\71\1\70\54\0"+
    "\1\72\3\0\1\73\20\0\1\74\70\0\1\75\3\0"+
    "\1\76\1\77\1\100\16\0\1\101\12\0\1\102\2\0"+
    "\1\103\1\0\1\104\42\0\1\105\1\106\1\0\1\107"+
    "\1\110\1\0\1\111\27\0\1\112\1\113\1\114\1\115"+
    "\2\0\1\116\1\0\1\117\21\0\1\120\1\121\7\0"+
    "\1\121\1\122\7\0\1\70\11\0\1\71\1\70\30\0"+
    "\1\122\12\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\123\5\4\1\124\2\4\7\0\1\4\16\0"+
    "\10\4\1\125\6\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\11\4\1\126\7\0\1\4\16\0\3\4"+
    "\1\127\13\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\3\4\1\130\6\4\7\0\1\4\16\0\1\131"+
    "\16\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\3\4\1\132\2\4\1\133\2\4\1\134\7\0\1\4"+
    "\16\0\1\135\16\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\11\4\1\136\7\0\1\4\16\0\1\137"+
    "\3\4\1\140\12\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\4\1\141\1\4\1\142\6\4\7\0"+
    "\1\4\16\0\12\4\1\143\4\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\144\1\145\2\4\1\146"+
    "\3\4\1\147\1\150\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\151"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\152\2\4\7\0"+
    "\1\4\16\0\5\4\1\153\1\154\10\4\41\0\1\155"+
    "\107\0\1\156\104\0\1\157\56\0\2\160\7\0\1\160"+
    "\22\0\1\161\12\0\1\162\30\0\3\163\1\164\2\0"+
    "\4\163\1\165\24\163\1\166\5\163\1\167\1\163\1\170"+
    "\36\163\3\36\1\171\2\0\40\36\1\172\37\36\12\0"+
    "\1\173\24\0\1\174\7\0\1\175\37\0\2\176\5\0"+
    "\1\176\7\0\1\176\1\0\12\176\7\0\1\176\16\0"+
    "\17\176\44\0\1\177\123\0\1\200\107\0\1\201\62\0"+
    "\1\202\20\0\1\203\1\0\1\204\70\0\1\205\120\0"+
    "\1\206\1\0\1\207\27\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\4\1\210\1\4\1\211\1\4\1\212"+
    "\4\4\7\0\1\4\16\0\1\4\1\213\1\214\14\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\6\4"+
    "\1\215\3\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\216\1\4\1\217"+
    "\6\4\1\220\7\0\1\4\16\0\3\4\1\221\1\222"+
    "\12\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\10\4\1\223\1\4\7\0\1\4\16\0\4\4\1\224"+
    "\7\4\1\225\1\226\1\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\10\4\1\227\1\230\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\1\231\11\4\7\0\1\4\16\0\1\232\16\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\233"+
    "\7\4\1\234\1\4\7\0\1\4\16\0\14\4\1\235"+
    "\2\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\1\236\16\4\44\0\1\237"+
    "\47\0\2\240\5\0\1\240\7\0\1\240\1\0\12\240"+
    "\7\0\1\240\16\0\17\240\13\0\2\241\7\0\1\241"+
    "\24\0\1\241\13\0\1\241\33\0\2\71\7\0\1\71"+
    "\10\0\1\70\12\0\1\70\55\0\3\73\113\0\1\242"+
    "\5\0\1\243\77\0\1\244\112\0\1\245\100\0\1\246"+
    "\1\0\1\247\4\0\1\250\137\0\1\251\117\0\1\252"+
    "\41\0\1\253\106\0\1\254\74\0\1\255\4\0\1\107"+
    "\34\0\1\256\51\0\1\257\106\0\1\260\42\0\1\261"+
    "\41\0\1\262\31\0\1\263\55\0\1\264\105\0\1\265"+
    "\151\0\1\266\35\0\1\267\1\0\1\270\101\0\1\271"+
    "\147\0\1\272\25\0\2\120\7\0\1\120\10\0\1\70"+
    "\11\0\1\71\1\70\50\0\1\120\1\121\7\0\1\121"+
    "\10\0\1\70\11\0\1\71\1\70\50\0\3\122\6\0"+
    "\1\122\4\0\1\122\2\0\3\122\11\0\1\122\16\0"+
    "\2\122\23\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\7\4\1\273\2\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\16\0\5\4\1\274\11\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\4\1\275\10\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\10\4\1\276"+
    "\6\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\1\277\16\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\2\4\1\300\14\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\1\301"+
    "\16\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\3\4\1\302\13\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\2\4\1\303"+
    "\7\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\10\4\1\304\6\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\3\4\1\305"+
    "\13\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\306\10\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\5\4\1\307"+
    "\4\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\2\4\1\310\14\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\1\4\1\276\1\311\7\4\7\0\1\4"+
    "\16\0\3\4\1\312\13\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\12\4"+
    "\1\313\4\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\12\4\1\314\4\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\4"+
    "\1\314\10\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\315\3\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\3\4\1\316\4\4\1\317\1\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\2\4\1\320\4\4\1\321\2\4"+
    "\7\0\1\4\16\0\13\4\1\322\3\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\323\3\4"+
    "\7\0\1\4\16\0\17\4\5\0\3\324\1\325\2\0"+
    "\26\324\1\326\51\324\35\327\1\330\50\327\6\0\2\160"+
    "\7\0\1\160\10\0\1\70\12\0\1\70\104\0\1\331"+
    "\122\0\1\332\26\0\3\333\1\334\2\0\37\333\1\172"+
    "\40\333\4\163\2\0\100\163\4\36\2\0\100\36\1\0"+
    "\2\176\3\0\3\176\6\0\2\176\1\0\12\176\7\0"+
    "\1\176\16\0\17\176\63\0\1\335\106\0\1\336\105\0"+
    "\1\337\105\0\1\340\27\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\5\4\1\341\4\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\3\4\1\276\6\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\5\4\1\342"+
    "\4\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\2\4\1\343\14\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\2\4\1\344"+
    "\14\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\11\4\1\345\5\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\7\4\1\346"+
    "\2\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\1\347\16\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\10\4\1\350\1\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\16\0\1\351\16\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\10\4\1\352\6\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\4\4\1\353"+
    "\12\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\5\4\1\354\11\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\355"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\356\11\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\1\357\1\4\1\360\3\4\1\361\1\362\1\4"+
    "\1\363\7\0\1\4\16\0\1\364\5\4\1\365\10\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\16\0\2\4\1\366\14\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\367\3\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\3\4\1\370\4\4\1\371\1\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\3\4"+
    "\1\372\13\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\3\4\1\276\13\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\373"+
    "\5\4\1\374\3\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\2\4\1\375"+
    "\7\4\7\0\1\4\16\0\17\4\6\0\2\240\3\0"+
    "\3\240\6\0\2\240\1\0\12\240\7\0\1\240\16\0"+
    "\17\240\13\0\2\241\7\0\1\241\112\0\1\376\104\0"+
    "\1\377\3\0\1\u0100\105\0\1\u0101\107\0\1\u0102\103\0"+
    "\1\u0103\100\0\1\u0104\41\0\1\u0105\53\0\1\u0106\137\0"+
    "\1\u0107\51\0\1\u0108\77\0\1\u0109\106\0\1\u010a\146\0"+
    "\1\256\106\0\1\u010b\45\0\1\u010c\111\0\1\u010d\141\0"+
    "\1\u010e\44\0\1\u010f\103\0\1\u0110\115\0\1\u0111\103\0"+
    "\1\u0112\110\0\1\u0113\141\0\1\u0114\110\0\1\u0115\46\0"+
    "\1\u0116\77\0\1\u0117\3\0\1\u0118\55\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\u0119\11\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\3\4\1\u011a\5\4\1\u011b\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\7\4\1\u011c\2\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\16\0\2\4\1\u011d\14\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u011e\3\4\7\0"+
    "\1\4\16\0\3\4\1\u011f\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\10\4\1\u0120\6\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\1\u0121\16\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\4\0\1\u0122\11\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\1\u0123\16\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\3\4\1\u0124\6\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u0125\3\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u0126"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u0127\3\4\7\0"+
    "\1\4\16\0\4\4\1\u0128\1\4\1\u0129\10\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\4\0\1\u012a\11\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u012b\3\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\5\4\1\u012c\4\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\1\0\1\u012d\5\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\4\0\1\u012e\11\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\4\4\1\u012f\5\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u0130\1\4\7\0\1\4\16\0"+
    "\17\4\5\0\3\324\1\325\2\0\103\324\1\325\1\u0131"+
    "\104\324\1\325\2\0\26\324\1\u0132\51\324\35\327\1\u0133"+
    "\50\327\35\u0134\1\330\1\u0134\1\u0135\46\u0134\42\0\1\u0136"+
    "\43\0\3\333\1\u0137\2\0\37\333\1\167\44\333\2\0"+
    "\100\333\57\0\1\u0138\27\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u0139\1\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\3\4\1\u013a\1\4\1\u013b"+
    "\1\u013c\10\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\4\4\1\u013d\5\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\1\u013e"+
    "\11\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\2\4\1\u013f\14\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\3\4\1\u0140"+
    "\13\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\2\4\1\u0141\1\u0142\1\4\1\u0143\4\4\7\0\1\4"+
    "\16\0\3\4\1\u0144\13\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\u0145\5\4\1\u0146\3\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u0147\3\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\u0148\10\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\4\1\u0149"+
    "\10\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\10\4\1\u014a\6\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\1\u014b\16\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\7\4"+
    "\1\u014c\2\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\4\1\314\2\4"+
    "\1\146\5\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\5\4\1\u014d\11\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\12\4"+
    "\1\u014e\4\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\1\u014f\16\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\16\0\3\4\1\361\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\7\4\1\u0150\7\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\1\u0151\13\0\1\u0151"+
    "\1\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\14\4\1\u0152\2\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\3\4"+
    "\1\u0153\6\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\1\4\1\u0154\6\4"+
    "\1\u0155\1\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\5\4\1\u0156\2\4"+
    "\1\u0157\1\4\7\0\1\4\16\0\17\4\32\0\1\u0158"+
    "\107\0\1\u0159\106\0\1\u015a\105\0\1\u015b\77\0\1\u015c"+
    "\105\0\1\u015d\114\0\1\u015e\104\0\1\u015f\110\0\1\u0160"+
    "\102\0\1\u0161\100\0\1\u0162\105\0\1\u0163\147\0\1\u0164"+
    "\22\0\1\u0165\165\0\1\u0166\115\0\1\u0167\43\0\1\u0168"+
    "\1\u0169\34\0\1\u016a\1\0\1\u016b\1\0\1\u016c\4\0"+
    "\1\u016d\10\0\1\u016e\30\0\1\u016f\136\0\1\u0170\110\0"+
    "\1\u0171\100\0\1\u0172\114\0\1\u0173\16\0\1\u0174\22\0"+
    "\1\u0175\147\0\1\u0176\105\0\1\u0177\51\0\1\u0178\74\0"+
    "\1\u0179\3\0\1\u017a\60\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\12\4\1\u017b"+
    "\4\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u017c\3\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\10\4\1\u017d"+
    "\1\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\u017e\11\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\2\4\1\u017f\14\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\1\u0180\13\0\1\u0180\1\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\7\4\1\146"+
    "\2\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\3\4\1\u0181\6\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\2\4\1\u0182"+
    "\1\u0183\1\4\1\u0184\1\u0185\10\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\11\4\1\u0186\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\5\4\1\u0187\11\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\10\4"+
    "\1\u0188\1\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\5\4\1\u0189\11\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\1\u018a"+
    "\16\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\4\0\1\u018b\11\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\4\0\1\u018c\11\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\u018d\11\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\3\4\1\u018e\6\4\7\0\1\4\16\0\17\4"+
    "\12\0\1\324\100\0\3\u0132\1\u018f\2\u0190\32\u0132\2\324"+
    "\44\u0132\35\327\1\u0133\1\156\47\327\35\u0134\1\u0191\50\u0134"+
    "\57\0\1\u0192\27\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\4\0\1\u0193\11\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\1\u0194\1\4\1\0"+
    "\12\4\7\0\1\4\16\0\4\4\1\u0195\12\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\10\4\1\u0196"+
    "\1\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\u0197\11\4\7\0\1\4"+
    "\16\0\3\4\1\u013a\13\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\10\4"+
    "\1\u0198\6\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\1\4\1\u0199\10\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\6\4"+
    "\1\u019a\3\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\5\4\1\u019b\4\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\2\4"+
    "\1\u019c\14\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\11\4\1\u019d\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u019e"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\u019f\11\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\1\4\1\u01a0\10\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\3\4"+
    "\1\u01a1\6\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\5\4\1\u01a2\4\4"+
    "\7\0\1\4\1\u01a3\13\0\1\u01a3\1\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\5\4\1\u01a4"+
    "\4\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\5\4\1\u01a5\11\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\2\4\1\u01a6"+
    "\14\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\u01a7\11\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\5\4\1\u01a2\4\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\314\11\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\3\4\1\u01a8\4\4\1\371\1\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\5\4\1\u01a2\4\4\7\0\1\4\4\0\1\u01a9\11\0"+
    "\3\4\1\u01aa\13\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\3\4\1\u01ab"+
    "\1\4\1\u01ac\1\u01ad\10\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u01ae\3\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\6\4\1\u01af\3\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\6\4"+
    "\1\u01b0\3\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\11\4\1\u01b1\7\0"+
    "\1\4\16\0\17\4\33\0\1\u01b2\107\0\1\u01b3\106\0"+
    "\1\u01b4\105\0\1\u01b5\77\0\1\u01b6\113\0\1\u01b7\77\0"+
    "\1\u01b8\3\0\1\u01b9\110\0\1\u01ba\105\0\1\u01bb\140\0"+
    "\1\u01bc\42\0\1\u01bd\150\0\1\u01be\2\0\1\u01bf\103\0"+
    "\1\u01c0\101\0\1\u01c1\55\0\1\u01c2\77\0\1\u01c3\150\0"+
    "\1\u01c4\100\0\1\u01c5\47\0\1\u01c6\103\0\1\u01c7\150\0"+
    "\1\u01c8\2\0\1\u01c9\47\0\1\u01ca\103\0\1\u01cb\141\0"+
    "\1\u01cc\1\u01cd\117\0\1\u01ce\73\0\1\u01cf\105\0\1\u01d0"+
    "\2\0\1\u01d1\45\0\1\u01d2\105\0\1\u01d3\143\0\1\u01d4"+
    "\43\0\1\u01d5\106\0\1\u01d6\103\0\1\u01d7\63\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\3\4\1\u01d8\4\4"+
    "\1\u01d8\1\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\10\4\1\u01d9\6\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\3\4"+
    "\1\u01da\13\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\12\4\1\u01db\4\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\5\4"+
    "\1\u01dc\4\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\11\4\1\u01dd\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\4\4\1\u01de"+
    "\12\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\10\4\1\u01df\1\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\u01e0\11\4"+
    "\7\0\1\4\16\0\3\4\1\u0183\13\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\1\u01e1\16\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\3\4\1\u01e2"+
    "\13\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\4\1\u01e3\10\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u01e4"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\10\4\1\u01e5\1\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u01e6\1\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\11\4\1\u01e7\7\0\1\4\16\0\17\4\5\0\3\u0132"+
    "\1\u018f\1\u01e8\33\u0132\2\324\44\u0132\40\u0190\2\0\44\u0190"+
    "\35\u0134\1\u0191\1\u0135\47\u0134\1\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\4\4"+
    "\1\u0195\12\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\5\4\1\u01e9\11\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\11\4"+
    "\1\u01ea\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u01eb\3\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u01ec\3\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u01ed\3\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\16\0\3\4\1\u01ee\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\1\u01ef\16\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\7\4\1\u01f0\2\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\2\4"+
    "\1\u01f1\7\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\7\0\1\4"+
    "\16\0\3\4\1\u01f2\13\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\u01f3\11\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u01f4\3\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u01f5"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\3\4\1\u011a\6\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u01f6\3\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\12\4\1\u01d8\4\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\16\0\4\4\1\u01f7\12\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\4\4\1\u01f8\12\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u01f9\1\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\1\u01fa\11\4\7\0\1\4\16\0\17\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\12\4\1\0\1\u01fb"+
    "\5\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\7\4\1\u01fc\2\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\5\4\1\u0156\4\4\7\0\1\4\16\0\17\4"+
    "\34\0\1\u01fd\107\0\1\u01fe\104\0\1\u01ff\104\0\1\u0200"+
    "\106\0\1\u0201\142\0\1\u0202\43\0\1\u0203\147\0\1\u01be"+
    "\104\0\1\u0204\44\0\1\u0205\144\0\1\u0206\53\0\1\u0207"+
    "\102\0\1\u0208\142\0\1\u0209\46\0\1\u020a\147\0\1\u01c8"+
    "\47\0\1\u020b\156\0\1\u020c\37\0\1\u020d\141\0\1\u020e"+
    "\104\0\1\u01d0\22\0\1\u0174\126\0\1\u020f\112\0\1\u0210"+
    "\137\0\1\u0211\53\0\1\u0212\101\0\1\u0213\62\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\u0214\3\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u0215\3\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\10\4\1\u0216\1\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\16\0\5\4\1\u0217\11\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\11\4\1\u0218\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\u0219\3\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\5\4\1\u021a\4\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\1\u021b\11\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u021c\3\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\1\u021d\16\4\5\0"+
    "\5\u0190\1\u0132\32\u0190\2\0\44\u0190\1\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\6\4\1\u021e\3\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\5\4\1\u021e"+
    "\11\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\7\4\1\u021f\7\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\7\4\1\u0220"+
    "\2\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\5\4\1\u0221\4\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\10\4\1\u0222\1\4\7\0\1\4\16\0"+
    "\17\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\10\4\1\u0223\6\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\7\4\1\u0224"+
    "\2\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\u0225\2\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\5\4\1\u0226"+
    "\11\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\5\4\1\u0227\11\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\11\4\1\u0228"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\6\4\1\u0229\3\4\7\0\1\4"+
    "\16\0\17\4\35\0\1\u022a\105\0\1\u022b\106\0\1\u022c"+
    "\102\0\1\u022d\156\0\1\u022e\33\0\1\u022f\62\0\1\u0230"+
    "\130\0\1\u0231\107\0\1\u0232\60\0\1\u016e\167\0\1\u0233"+
    "\110\0\1\u0234\106\0\1\u0235\40\0\1\u0236\147\0\1\u0237"+
    "\43\0\1\u0238\147\0\1\u0239\21\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\1\4\1\u023a\10\4\7\0\1\4"+
    "\16\0\17\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\2\4\1\u023b\7\4\7\0\1\4\16\0\17\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\12\4"+
    "\7\0\1\4\16\0\3\4\1\u023c\13\4\6\0\2\4"+
    "\3\0\3\4\6\0\2\4\1\0\6\4\1\u023d\3\4"+
    "\7\0\1\4\16\0\17\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\5\4"+
    "\1\u023d\11\4\6\0\2\4\3\0\3\4\6\0\2\4"+
    "\1\0\12\4\7\0\1\4\16\0\7\4\1\u023e\7\4"+
    "\6\0\2\4\3\0\3\4\6\0\2\4\1\0\11\4"+
    "\1\u023f\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\5\4\1\u0240\4\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\3\4\1\u0241"+
    "\13\4\6\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\6\4\1\u014d\3\4\7\0\1\4\16\0\17\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\6\4\1\u0242"+
    "\3\4\7\0\1\4\16\0\17\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\12\4\7\0\1\4\16\0"+
    "\5\4\1\u0242\11\4\6\0\2\4\3\0\3\4\6\0"+
    "\2\4\1\0\12\4\7\0\1\4\16\0\7\4\1\u0243"+
    "\7\4\36\0\1\u0244\104\0\1\u0245\102\0\1\u0246\144\0"+
    "\1\u0247\46\0\1\u0248\102\0\1\u0249\113\0\1\u024a\105\0"+
    "\1\u024b\145\0\1\u024c\37\0\1\u024d\145\0\1\u024e\45\0"+
    "\1\u024f\64\0\2\4\3\0\3\4\6\0\2\4\1\0"+
    "\12\4\7\0\1\4\16\0\3\4\1\u0250\13\4\6\0"+
    "\2\4\3\0\3\4\6\0\2\4\1\0\12\4\7\0"+
    "\1\4\16\0\3\4\1\u0183\13\4\6\0\2\4\3\0"+
    "\3\4\6\0\2\4\1\0\1\4\1\u0251\10\4\7\0"+
    "\1\4\16\0\17\4\6\0\2\4\3\0\3\4\6\0"+
    "\1\u0194\1\4\1\0\12\4\7\0\1\4\4\0\1\u0252"+
    "\11\0\4\4\1\u0195\12\4\6\0\2\4\3\0\3\4"+
    "\6\0\2\4\1\0\12\4\7\0\1\4\16\0\3\4"+
    "\1\u01ab\13\4\72\0\1\u0253\120\0\1\u0254\37\0\1\u0255"+
    "\55\0\1\u0256\136\0\1\u0257\144\0\1\u0258\46\0\1\u0259"+
    "\140\0\1\u025a\51\0\1\u025b\103\0\1\u020c\145\0\1\u025c"+
    "\40\0\1\u025d\112\0\1\u025e\100\0\1\u025f\151\0\1\u0260"+
    "\44\0\1\u0261\144\0\1\u0262\50\0\1\u0263\101\0\1\u0264"+
    "\120\0\1\u0265\133\0\1\u0266\110\0\1\u0267\102\0\1\u0268"+
    "\56\0\1\u0269\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\14\1\1\11\4\1\1\11\2\1\1\11"+
    "\6\1\1\11\11\1\3\11\1\1\1\11\3\1\2\11"+
    "\4\0\1\11\16\0\36\1\1\11\1\0\7\1\1\11"+
    "\2\1\4\11\1\1\3\11\1\0\2\1\1\11\1\1"+
    "\1\11\27\1\1\11\2\1\1\0\1\1\27\0\36\1"+
    "\1\11\1\0\2\1\1\0\3\11\35\1\15\0\1\1"+
    "\3\0\1\1\4\0\1\1\4\0\11\1\1\11\7\1"+
    "\1\11\2\1\2\11\2\1\1\0\1\1\1\0\1\1"+
    "\2\11\32\1\1\11\6\1\6\0\1\1\1\11\2\0"+
    "\1\11\30\0\5\1\1\11\12\1\2\11\4\1\1\0"+
    "\2\11\17\1\1\11\5\1\1\11\10\1\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\7\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\1\5\0\43\1\1\11\1\1"+
    "\1\0\2\11\2\0\1\11\2\0\1\11\1\0\1\1"+
    "\1\11\2\0\1\1\1\11\7\0\26\1\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\7\0\12\1\3\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\1\3\0\1\11"+
    "\6\0\1\1\3\11\3\0\1\11\2\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Not sure if needed:
  StringBuffer string = new StringBuffer();

  // Placeholders for line and column information:
  private int yyline;
  private int yycolumn;

  public int getYyline() { return yyline; }
  public int getYycolumn() { return yycolumn; }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ATSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ATSTokenTypes.IDENTIFIER;
            }
          case 165: break;
          case 2: 
            { return ATSTokenTypes.BACKSLASH;
            }
          case 166: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 167: break;
          case 4: 
            { return ATSTokenTypes.INT;
            }
          case 168: break;
          case 5: 
            { return ATSTokenTypes.PERCENT;
            }
          case 169: break;
          case 6: 
            { return ATSTokenTypes.LBRACE;
            }
          case 170: break;
          case 7: 
            { return ATSTokenTypes.HASH;
            }
          case 171: break;
          case 8: 
            { return ATSTokenTypes.DOLLAR;
            }
          case 172: break;
          case 9: 
            { return ATSTokenTypes.RBRACE;
            }
          case 173: break;
          case 10: 
            { return ATSTokenTypes.RPAREN;
            }
          case 174: break;
          case 11: 
            { return ATSTokenTypes.LPAREN;
            }
          case 175: break;
          case 12: 
            { return ATSTokenTypes.DOT;
            }
          case 176: break;
          case 13: 
            { return ATSTokenTypes.STRING;
            }
          case 177: break;
          case 14: 
            { return ATSTokenTypes.CHAR;
            }
          case 178: break;
          case 15: 
            { return ATSTokenTypes.LBRACKET;
            }
          case 179: break;
          case 16: 
            { return ATSTokenTypes.AT;
            }
          case 180: break;
          case 17: 
            { return ATSTokenTypes.BANG;
            }
          case 181: break;
          case 18: 
            { return ATSTokenTypes.BAR;
            }
          case 182: break;
          case 19: 
            { return ATSTokenTypes.BQUOTE;
            }
          case 183: break;
          case 20: 
            { return ATSTokenTypes.COLON;
            }
          case 184: break;
          case 21: 
            { return ATSTokenTypes.LT;
            }
          case 185: break;
          case 22: 
            { return ATSTokenTypes.EQ;
            }
          case 186: break;
          case 23: 
            { return ATSTokenTypes.GT;
            }
          case 187: break;
          case 24: 
            { return ATSTokenTypes.TILDE;
            }
          case 188: break;
          case 25: 
            { return ATSTokenTypes.COMMA;
            }
          case 189: break;
          case 26: 
            { return ATSTokenTypes.SEMICOLON;
            }
          case 190: break;
          case 27: 
            { return ATSTokenTypes.RBRACKET;
            }
          case 191: break;
          case 28: 
            { return ATSTokenTypes.QMARK;
            }
          case 192: break;
          case 29: 
            { return ATSTokenTypes.CRLF;
            }
          case 193: break;
          case 30: 
            { return ATSTokenTypes.FLOAT;
            }
          case 194: break;
          case 31: 
            { return ATSTokenTypes.EXTCODE;
            }
          case 195: break;
          case 32: 
            { return ATSTokenTypes.PERCENTLPAREN;
            }
          case 196: break;
          case 33: 
            { return ATSTokenTypes.HASHLBRACKETOLON;
            }
          case 197: break;
          case 34: 
            { return ATSTokenTypes.IN;
            }
          case 198: break;
          case 35: 
            { return ATSTokenTypes.IF;
            }
          case 199: break;
          case 36: 
            { return ATSTokenTypes.DO;
            }
          case 200: break;
          case 37: 
            { return ATSTokenTypes.FUN;
            }
          case 201: break;
          case 38: 
            { return ATSTokenTypes.OF;
            }
          case 202: break;
          case 39: 
            { return ATSTokenTypes.OP;
            }
          case 203: break;
          case 40: 
            { return ATSTokenTypes.COMMENT_LINE;
            }
          case 204: break;
          case 41: 
            { return ATSTokenTypes.COMMENT_BLOCK;
            }
          case 205: break;
          case 42: 
            { return ATSTokenTypes.DOTINT;
            }
          case 206: break;
          case 43: 
            { return ATSTokenTypes.DOTDOT;
            }
          case 207: break;
          case 44: 
            { return ATSTokenTypes.DOTLT;
            }
          case 208: break;
          case 45: 
            { return ATSTokenTypes.QUOTELBRACE;
            }
          case 209: break;
          case 46: 
            { return ATSTokenTypes.QUOTELPAREN;
            }
          case 210: break;
          case 47: 
            { return ATSTokenTypes.QUOTELBRACKET;
            }
          case 211: break;
          case 48: 
            { return ATSTokenTypes.ATLBRACE;
            }
          case 212: break;
          case 49: 
            { return ATSTokenTypes.ATLPAREN;
            }
          case 213: break;
          case 50: 
            { return ATSTokenTypes.ATLBRACKET;
            }
          case 214: break;
          case 51: 
            { return ATSTokenTypes.VAL_IDENTIFIER;
            }
          case 215: break;
          case 52: 
            { return ATSTokenTypes.BQUOTELPAREN;
            }
          case 216: break;
          case 53: 
            { return ATSTokenTypes.COLONLT;
            }
          case 217: break;
          case 54: 
            { return ATSTokenTypes.GTLT;
            }
          case 218: break;
          case 55: 
            { return ATSTokenTypes.EQLT;
            }
          case 219: break;
          case 56: 
            { return ATSTokenTypes.EQGT;
            }
          case 220: break;
          case 57: 
            { return ATSTokenTypes.GTDOT;
            }
          case 221: break;
          case 58: 
            { return ATSTokenTypes.MINUSLT;
            }
          case 222: break;
          case 59: 
            { return ATSTokenTypes.MINUSGT;
            }
          case 223: break;
          case 60: 
            { return ATSTokenTypes.AS;
            }
          case 224: break;
          case 61: 
            { return ATSTokenTypes.COMMALPAREN;
            }
          case 225: break;
          case 62: 
            { return ATSTokenTypes.REF_IDENTIFIER;
            }
          case 226: break;
          case 63: 
            { return ATSTokenTypes.SRPIF;
            }
          case 227: break;
          case 64: 
            { return ATSTokenTypes.DLREFFMASK_ARG;
            }
          case 228: break;
          case 65: 
            { return ATSTokenTypes.LET;
            }
          case 229: break;
          case 66: 
            { return ATSTokenTypes.LAM;
            }
          case 230: break;
          case 67: 
            { return ATSTokenTypes.END;
            }
          case 231: break;
          case 68: 
            { return ATSTokenTypes.FIX;
            }
          case 232: break;
          case 69: 
            { return ATSTokenTypes.REC;
            }
          case 233: break;
          case 70: 
            { return ATSTokenTypes.COMMENT_DOC;
            }
          case 234: break;
          case 71: 
            { return ATSTokenTypes.DOTDOTDOT;
            }
          case 235: break;
          case 72: 
            { return ATSTokenTypes.EQLTGT;
            }
          case 236: break;
          case 73: 
            { return ATSTokenTypes.EQGTGT;
            }
          case 237: break;
          case 74: 
            { return ATSTokenTypes.MINUSLTGT;
            }
          case 238: break;
          case 75: 
            { return ATSTokenTypes.AND;
            }
          case 239: break;
          case 76: 
            { return ATSTokenTypes.SIF;
            }
          case 240: break;
          case 77: 
            { return ATSTokenTypes.TRY;
            }
          case 241: break;
          case 78: 
            { return ATSTokenTypes.VAL;
            }
          case 242: break;
          case 79: 
            { return ATSTokenTypes.VAR;
            }
          case 243: break;
          case 80: 
            { return ATSTokenTypes.DLRLST;
            }
          case 244: break;
          case 81: 
            { return ATSTokenTypes.DLRREC;
            }
          case 245: break;
          case 82: 
            { return ATSTokenTypes.DLRTUP;
            }
          case 246: break;
          case 83: 
            { return ATSTokenTypes.CASE;
            }
          case 247: break;
          case 84: 
            { return ATSTokenTypes.ELSE;
            }
          case 248: break;
          case 85: 
            { return ATSTokenTypes.FORSTAR;
            }
          case 249: break;
          case 86: 
            { return ATSTokenTypes.REFAT;
            }
          case 250: break;
          case 87: 
            { return ATSTokenTypes.DOTLTGTDOT;
            }
          case 251: break;
          case 88: 
            { return ATSTokenTypes.EQSLASHEQGT;
            }
          case 252: break;
          case 89: 
            { return ATSTokenTypes.TYPE;
            }
          case 253: break;
          case 90: 
            { return ATSTokenTypes.THEN;
            }
          case 254: break;
          case 91: 
            { return ATSTokenTypes.WITH;
            }
          case 255: break;
          case 92: 
            { return ATSTokenTypes.WHEN;
            }
          case 256: break;
          case 93: 
            { return ATSTokenTypes.SRPELIF;
            }
          case 257: break;
          case 94: 
            { return ATSTokenTypes.SRPELSE;
            }
          case 258: break;
          case 95: 
            { return ATSTokenTypes.SRPTHEN;
            }
          case 259: break;
          case 96: 
            { return ATSTokenTypes.FIXITY;
            }
          case 260: break;
          case 97: 
            { return ATSTokenTypes.LOCAL;
            }
          case 261: break;
          case 98: 
            { return ATSTokenTypes.FREEAT;
            }
          case 262: break;
          case 99: 
            { return ATSTokenTypes.FOLDAT;
            }
          case 263: break;
          case 100: 
            { return ATSTokenTypes.COMMENT_REST;
            }
          case 264: break;
          case 101: 
            { return ATSTokenTypes.EQSLASHEQGTGT;
            }
          case 265: break;
          case 102: 
            { return ATSTokenTypes.ADDRAT;
            }
          case 266: break;
          case 103: 
            { return ATSTokenTypes.BEGIN;
            }
          case 267: break;
          case 104: 
            { return ATSTokenTypes.SCASE;
            }
          case 268: break;
          case 105: 
            { return ATSTokenTypes.VIEWAT;
            }
          case 269: break;
          case 106: 
            { return ATSTokenTypes.WHILE;
            }
          case 270: break;
          case 107: 
            { return ATSTokenTypes.WHERE;
            }
          case 271: break;
          case 108: 
            { return ATSTokenTypes.SRPIFDEF;
            }
          case 272: break;
          case 109: 
            { return ATSTokenTypes.SRPUNDEF;
            }
          case 273: break;
          case 110: 
            { return ATSTokenTypes.SRPENDIF;
            }
          case 274: break;
          case 111: 
            { return ATSTokenTypes.SRPERROR;
            }
          case 275: break;
          case 112: 
            { return ATSTokenTypes.SRPPRINT;
            }
          case 276: break;
          case 113: 
            { return ATSTokenTypes.DLRDELAY;
            }
          case 277: break;
          case 114: 
            { return ATSTokenTypes.DLRRAISE;
            }
          case 278: break;
          case 115: 
            { return ATSTokenTypes.DLRBREAK;
            }
          case 279: break;
          case 116: 
            { return ATSTokenTypes.IMPORT;
            }
          case 280: break;
          case 117: 
            { return ATSTokenTypes.NONFIX;
            }
          case 281: break;
          case 118: 
            { return ATSTokenTypes.EXTERN;
            }
          case 282: break;
          case 119: 
            { return ATSTokenTypes.EXTYPE;
            }
          case 283: break;
          case 120: 
            { return ATSTokenTypes.EXTVAR;
            }
          case 284: break;
          case 121: 
            { return ATSTokenTypes.ASSUME;
            }
          case 285: break;
          case 122: 
            { return ATSTokenTypes.STACST;
            }
          case 286: break;
          case 123: 
            { return ATSTokenTypes.STADEF;
            }
          case 287: break;
          case 124: 
            { return ATSTokenTypes.STATIC;
            }
          case 288: break;
          case 125: 
            { return ATSTokenTypes.WHILESTAR;
            }
          case 289: break;
          case 126: 
            { return ATSTokenTypes.MACDEF;
            }
          case 290: break;
          case 127: 
            { return ATSTokenTypes.SRPIFNDEF;
            }
          case 291: break;
          case 128: 
            { return ATSTokenTypes.SRPDEFINE;
            }
          case 292: break;
          case 129: 
            { return ATSTokenTypes.SRPASSERT;
            }
          case 293: break;
          case 130: 
            { return ATSTokenTypes.DLREXTERN;
            }
          case 294: break;
          case 131: 
            { return ATSTokenTypes.DLREXTYPE;
            }
          case 295: break;
          case 132: 
            { return ATSTokenTypes.DLREXTVAL;
            }
          case 296: break;
          case 133: 
            { return ATSTokenTypes.DLRARRPSZ;
            }
          case 297: break;
          case 134: 
            { return ATSTokenTypes.SRPDYNLOAD;
            }
          case 298: break;
          case 135: 
            { return ATSTokenTypes.REQUIRE;
            }
          case 299: break;
          case 136: 
            { return ATSTokenTypes.ABSTYPE;
            }
          case 300: break;
          case 137: 
            { return ATSTokenTypes.SORTDEF;
            }
          case 301: break;
          case 138: 
            { return ATSTokenTypes.SRPSTALOAD;
            }
          case 302: break;
          case 139: 
            { return ATSTokenTypes.SYMINTR;
            }
          case 303: break;
          case 140: 
            { return ATSTokenTypes.SYMELIM;
            }
          case 304: break;
          case 141: 
            { return ATSTokenTypes.TYPEDEF;
            }
          case 305: break;
          case 142: 
            { return ATSTokenTypes.TKINDEF;
            }
          case 306: break;
          case 143: 
            { return ATSTokenTypes.SRPINCLUDE;
            }
          case 307: break;
          case 144: 
            { return ATSTokenTypes.SRPELIFDEF;
            }
          case 308: break;
          case 145: 
            { return ATSTokenTypes.DLREFFMASK;
            }
          case 309: break;
          case 146: 
            { return ATSTokenTypes.DLREXTKIND;
            }
          case 310: break;
          case 147: 
            { return ATSTokenTypes.CLASSDEC;
            }
          case 311: break;
          case 148: 
            { return ATSTokenTypes.DATASORT;
            }
          case 312: break;
          case 149: 
            { return ATSTokenTypes.DATATYPE;
            }
          case 313: break;
          case 150: 
            { return ATSTokenTypes.OVERLOAD;
            }
          case 314: break;
          case 151: 
            { return ATSTokenTypes.WITHTYPE;
            }
          case 315: break;
          case 152: 
            { return ATSTokenTypes.SRPELIFNDEF;
            }
          case 316: break;
          case 153: 
            { return ATSTokenTypes.DLRCONTINUE;
            }
          case 317: break;
          case 154: 
            { return ATSTokenTypes.DLREXTFCALL;
            }
          case 318: break;
          case 155: 
            { return ATSTokenTypes.DLREXTMCALL;
            }
          case 319: break;
          case 156: 
            { return ATSTokenTypes.DLRSHOWTYPE;
            }
          case 320: break;
          case 157: 
            { return ATSTokenTypes.IMPLEMENT;
            }
          case 321: break;
          case 158: 
            { return ATSTokenTypes.EXCEPTION;
            }
          case 322: break;
          case 159: 
            { return ATSTokenTypes.DLRTEMPENVER;
            }
          case 323: break;
          case 160: 
            { return ATSTokenTypes.DLRVCOPYENV;
            }
          case 324: break;
          case 161: 
            { return ATSTokenTypes.DLRMYLOCATION;
            }
          case 325: break;
          case 162: 
            { return ATSTokenTypes.DLRMYFILENAME;
            }
          case 326: break;
          case 163: 
            { return ATSTokenTypes.DLRMYFUNCTION;
            }
          case 327: break;
          case 164: 
            { return ATSTokenTypes.DLREXTYPE_STRUCT;
            }
          case 328: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
